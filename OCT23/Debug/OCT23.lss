
OCT23.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fcc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005c  00800060  00000fcc  00001060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  008000bc  008000bc  000010bc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001118  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00001154  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019d7  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ac0  00000000  00000000  00002c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c8c  00000000  00000000  0000370b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b0  00000000  00000000  00004398  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000789  00000000  00000000  00004648  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001394  00000000  00000000  00004dd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00006165  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ec       	ldi	r30, 0xCC	; 204
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3b       	cpi	r26, 0xBC	; 188
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac eb       	ldi	r26, 0xBC	; 188
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3d       	cpi	r26, 0xD2	; 210
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ed 02 	call	0x5da	; 0x5da <main>
  8a:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Keypad_Init>:
*  Author: user
*/
#include "Keypad_Config.h"
#include "Keypad.h"

void Keypad_Init(void){
  92:	ef 92       	push	r14
  94:	ff 92       	push	r15
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	c0 e7       	ldi	r28, 0x70	; 112
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	0f 2e       	mov	r0, r31
  a4:	f4 e7       	ldi	r31, 0x74	; 116
  a6:	ef 2e       	mov	r14, r31
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	ff 2e       	mov	r15, r31
  ac:	f0 2d       	mov	r31, r0
  ae:	8e 01       	movw	r16, r28
	//cols input
	for (u8 i=0;i<colsCount;i++)
	{
		DIO_ConfigChannel(keypadCols[i],Input);
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	89 91       	ld	r24, Y+
  b4:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_ConfigChannel>
		DIO_WriteChannel(keypadCols[i],STD_High);//connect Pullup Res.
  b8:	61 e0       	ldi	r22, 0x01	; 1
  ba:	f8 01       	movw	r30, r16
  bc:	80 81       	ld	r24, Z
  be:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <DIO_WriteChannel>
#include "Keypad_Config.h"
#include "Keypad.h"

void Keypad_Init(void){
	//cols input
	for (u8 i=0;i<colsCount;i++)
  c2:	ce 15       	cp	r28, r14
  c4:	df 05       	cpc	r29, r15
  c6:	99 f7       	brne	.-26     	; 0xae <Keypad_Init+0x1c>
  c8:	c4 e7       	ldi	r28, 0x74	; 116
  ca:	d0 e0       	ldi	r29, 0x00	; 0
  cc:	0f 2e       	mov	r0, r31
  ce:	f8 e7       	ldi	r31, 0x78	; 120
  d0:	ef 2e       	mov	r14, r31
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	ff 2e       	mov	r15, r31
  d6:	f0 2d       	mov	r31, r0
  d8:	8e 01       	movw	r16, r28
		DIO_WriteChannel(keypadCols[i],STD_High);//connect Pullup Res.
	}
	//rows output
	for (u8 j=0;j<rowsCount;j++)
	{
		DIO_ConfigChannel(keypadRows[j],Output);
  da:	61 e0       	ldi	r22, 0x01	; 1
  dc:	89 91       	ld	r24, Y+
  de:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_ConfigChannel>
		DIO_WriteChannel(keypadRows[j],STD_High);//output -> 5V
  e2:	61 e0       	ldi	r22, 0x01	; 1
  e4:	f8 01       	movw	r30, r16
  e6:	80 81       	ld	r24, Z
  e8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <DIO_WriteChannel>
	{
		DIO_ConfigChannel(keypadCols[i],Input);
		DIO_WriteChannel(keypadCols[i],STD_High);//connect Pullup Res.
	}
	//rows output
	for (u8 j=0;j<rowsCount;j++)
  ec:	ce 15       	cp	r28, r14
  ee:	df 05       	cpc	r29, r15
  f0:	99 f7       	brne	.-26     	; 0xd8 <Keypad_Init+0x46>
	{
		DIO_ConfigChannel(keypadRows[j],Output);
		DIO_WriteChannel(keypadRows[j],STD_High);//output -> 5V
	}
}
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	1f 91       	pop	r17
  f8:	0f 91       	pop	r16
  fa:	ff 90       	pop	r15
  fc:	ef 90       	pop	r14
  fe:	08 95       	ret

00000100 <GetKey>:
u8 GetKey(void){
 100:	6f 92       	push	r6
 102:	7f 92       	push	r7
 104:	8f 92       	push	r8
 106:	9f 92       	push	r9
 108:	af 92       	push	r10
 10a:	bf 92       	push	r11
 10c:	cf 92       	push	r12
 10e:	df 92       	push	r13
 110:	ef 92       	push	r14
 112:	ff 92       	push	r15
 114:	0f 93       	push	r16
 116:	1f 93       	push	r17
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	04 e7       	ldi	r16, 0x74	; 116
 11e:	10 e0       	ldi	r17, 0x00	; 0
 120:	c1 2c       	mov	r12, r1
 122:	d1 2c       	mov	r13, r1
	for (u8 i=0;i<rowsCount;i++)
	{
		DIO_WriteChannel(keypadRows[i],STD_Low);
 124:	46 01       	movw	r8, r12
 126:	58 01       	movw	r10, r16
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	f8 01       	movw	r30, r16
 12c:	80 81       	ld	r24, Z
 12e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <DIO_WriteChannel>
 132:	c0 e7       	ldi	r28, 0x70	; 112
 134:	d0 e0       	ldi	r29, 0x00	; 0
 136:	61 2c       	mov	r6, r1
 138:	71 2c       	mov	r7, r1
		for (u8 j=0;j<colsCount;j++)
		{
			if (DIO_ReadChannel(keypadCols[j]) == STD_Low)
 13a:	73 01       	movw	r14, r6
 13c:	89 91       	ld	r24, Y+
 13e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_ReadChannel>
 142:	81 11       	cpse	r24, r1
 144:	14 c0       	rjmp	.+40     	; 0x16e <GetKey+0x6e>
			{
				while(DIO_ReadChannel(keypadCols[j]) == STD_Low);
 146:	e3 01       	movw	r28, r6
 148:	c0 59       	subi	r28, 0x90	; 144
 14a:	df 4f       	sbci	r29, 0xFF	; 255
 14c:	88 81       	ld	r24, Y
 14e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_ReadChannel>
 152:	88 23       	and	r24, r24
 154:	d9 f3       	breq	.-10     	; 0x14c <GetKey+0x4c>
				return keypad[i][j];
 156:	c4 01       	movw	r24, r8
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	80 5a       	subi	r24, 0xA0	; 160
 162:	9f 4f       	sbci	r25, 0xFF	; 255
 164:	fc 01       	movw	r30, r24
 166:	ee 0d       	add	r30, r14
 168:	ff 1d       	adc	r31, r15
 16a:	80 81       	ld	r24, Z
 16c:	16 c0       	rjmp	.+44     	; 0x19a <GetKey+0x9a>
 16e:	ff ef       	ldi	r31, 0xFF	; 255
 170:	6f 1a       	sub	r6, r31
 172:	7f 0a       	sbc	r7, r31
}
u8 GetKey(void){
	for (u8 i=0;i<rowsCount;i++)
	{
		DIO_WriteChannel(keypadRows[i],STD_Low);
		for (u8 j=0;j<colsCount;j++)
 174:	84 e0       	ldi	r24, 0x04	; 4
 176:	68 16       	cp	r6, r24
 178:	71 04       	cpc	r7, r1
 17a:	f9 f6       	brne	.-66     	; 0x13a <GetKey+0x3a>
 17c:	0f 5f       	subi	r16, 0xFF	; 255
 17e:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				while(DIO_ReadChannel(keypadCols[j]) == STD_Low);
				return keypad[i][j];
			}
		}
		DIO_WriteChannel(keypadRows[i],STD_High);
 180:	61 e0       	ldi	r22, 0x01	; 1
 182:	f5 01       	movw	r30, r10
 184:	80 81       	ld	r24, Z
 186:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <DIO_WriteChannel>
 18a:	ff ef       	ldi	r31, 0xFF	; 255
 18c:	cf 1a       	sub	r12, r31
 18e:	df 0a       	sbc	r13, r31
		DIO_ConfigChannel(keypadRows[j],Output);
		DIO_WriteChannel(keypadRows[j],STD_High);//output -> 5V
	}
}
u8 GetKey(void){
	for (u8 i=0;i<rowsCount;i++)
 190:	84 e0       	ldi	r24, 0x04	; 4
 192:	c8 16       	cp	r12, r24
 194:	d1 04       	cpc	r13, r1
 196:	31 f6       	brne	.-116    	; 0x124 <GetKey+0x24>
				return keypad[i][j];
			}
		}
		DIO_WriteChannel(keypadRows[i],STD_High);
	}
	return STD_Low;
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	1f 91       	pop	r17
 1a0:	0f 91       	pop	r16
 1a2:	ff 90       	pop	r15
 1a4:	ef 90       	pop	r14
 1a6:	df 90       	pop	r13
 1a8:	cf 90       	pop	r12
 1aa:	bf 90       	pop	r11
 1ac:	af 90       	pop	r10
 1ae:	9f 90       	pop	r9
 1b0:	8f 90       	pop	r8
 1b2:	7f 90       	pop	r7
 1b4:	6f 90       	pop	r6
 1b6:	08 95       	ret

000001b8 <LCD_Cmd>:
		for (u8 i=0;i<8;i++)
		{
			LCD_Char(msg[i]);
		}
	}
}
 1b8:	cf 93       	push	r28
 1ba:	c8 2f       	mov	r28, r24
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	89 e0       	ldi	r24, 0x09	; 9
 1c0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <DIO_WriteChannel>
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0e 94 2f 04 	call	0x85e	; 0x85e <DIO_ReadPort>
 1ca:	8f 70       	andi	r24, 0x0F	; 15
 1cc:	9c 2f       	mov	r25, r28
 1ce:	90 7f       	andi	r25, 0xF0	; 240
 1d0:	68 2f       	mov	r22, r24
 1d2:	69 2b       	or	r22, r25
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	0e 94 41 04 	call	0x882	; 0x882 <DIO_WritePort>
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	8b e0       	ldi	r24, 0x0B	; 11
 1de:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <DIO_WriteChannel>
 1e2:	8f e8       	ldi	r24, 0x8F	; 143
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <LCD_Cmd+0x2e>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <LCD_Cmd+0x34>
 1ec:	00 00       	nop
 1ee:	61 e0       	ldi	r22, 0x01	; 1
 1f0:	8b e0       	ldi	r24, 0x0B	; 11
 1f2:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <DIO_WriteChannel>
 1f6:	8f e1       	ldi	r24, 0x1F	; 31
 1f8:	9e e4       	ldi	r25, 0x4E	; 78
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <LCD_Cmd+0x42>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <LCD_Cmd+0x48>
 200:	00 00       	nop
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	0e 94 2f 04 	call	0x85e	; 0x85e <DIO_ReadPort>
 208:	8f 70       	andi	r24, 0x0F	; 15
 20a:	90 e1       	ldi	r25, 0x10	; 16
 20c:	c9 9f       	mul	r28, r25
 20e:	90 01       	movw	r18, r0
 210:	11 24       	eor	r1, r1
 212:	68 2f       	mov	r22, r24
 214:	62 2b       	or	r22, r18
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	0e 94 41 04 	call	0x882	; 0x882 <DIO_WritePort>
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	8b e0       	ldi	r24, 0x0B	; 11
 220:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <DIO_WriteChannel>
 224:	8f e8       	ldi	r24, 0x8F	; 143
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <LCD_Cmd+0x70>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <LCD_Cmd+0x76>
 22e:	00 00       	nop
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	8b e0       	ldi	r24, 0x0B	; 11
 234:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <DIO_WriteChannel>
 238:	8f e3       	ldi	r24, 0x3F	; 63
 23a:	9f e1       	ldi	r25, 0x1F	; 31
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <LCD_Cmd+0x84>
 240:	00 c0       	rjmp	.+0      	; 0x242 <LCD_Cmd+0x8a>
 242:	00 00       	nop
 244:	cf 91       	pop	r28
 246:	08 95       	ret

00000248 <LCD_Init>:
 248:	60 e0       	ldi	r22, 0x00	; 0
 24a:	8a e0       	ldi	r24, 0x0A	; 10
 24c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <DIO_WriteChannel>
 250:	61 e0       	ldi	r22, 0x01	; 1
 252:	8b e0       	ldi	r24, 0x0B	; 11
 254:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <DIO_WriteChannel>
 258:	2f ef       	ldi	r18, 0xFF	; 255
 25a:	89 ef       	ldi	r24, 0xF9	; 249
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	21 50       	subi	r18, 0x01	; 1
 260:	80 40       	sbci	r24, 0x00	; 0
 262:	90 40       	sbci	r25, 0x00	; 0
 264:	e1 f7       	brne	.-8      	; 0x25e <LCD_Init+0x16>
 266:	00 c0       	rjmp	.+0      	; 0x268 <LCD_Init+0x20>
 268:	00 00       	nop
 26a:	83 e3       	ldi	r24, 0x33	; 51
 26c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_Cmd>
 270:	82 e3       	ldi	r24, 0x32	; 50
 272:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_Cmd>
 276:	88 e2       	ldi	r24, 0x28	; 40
 278:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_Cmd>
 27c:	86 e0       	ldi	r24, 0x06	; 6
 27e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_Cmd>
 282:	8c e0       	ldi	r24, 0x0C	; 12
 284:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_Cmd>
 288:	08 95       	ret

0000028a <LCD_Char>:
 28a:	cf 93       	push	r28
 28c:	c8 2f       	mov	r28, r24
 28e:	61 e0       	ldi	r22, 0x01	; 1
 290:	89 e0       	ldi	r24, 0x09	; 9
 292:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <DIO_WriteChannel>
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	0e 94 2f 04 	call	0x85e	; 0x85e <DIO_ReadPort>
 29c:	8f 70       	andi	r24, 0x0F	; 15
 29e:	9c 2f       	mov	r25, r28
 2a0:	90 7f       	andi	r25, 0xF0	; 240
 2a2:	68 2f       	mov	r22, r24
 2a4:	69 2b       	or	r22, r25
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	0e 94 41 04 	call	0x882	; 0x882 <DIO_WritePort>
 2ac:	60 e0       	ldi	r22, 0x00	; 0
 2ae:	8b e0       	ldi	r24, 0x0B	; 11
 2b0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <DIO_WriteChannel>
 2b4:	8f e8       	ldi	r24, 0x8F	; 143
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <LCD_Char+0x2e>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <LCD_Char+0x34>
 2be:	00 00       	nop
 2c0:	61 e0       	ldi	r22, 0x01	; 1
 2c2:	8b e0       	ldi	r24, 0x0B	; 11
 2c4:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <DIO_WriteChannel>
 2c8:	8f e1       	ldi	r24, 0x1F	; 31
 2ca:	9e e4       	ldi	r25, 0x4E	; 78
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <LCD_Char+0x42>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <LCD_Char+0x48>
 2d2:	00 00       	nop
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	0e 94 2f 04 	call	0x85e	; 0x85e <DIO_ReadPort>
 2da:	8f 70       	andi	r24, 0x0F	; 15
 2dc:	90 e1       	ldi	r25, 0x10	; 16
 2de:	c9 9f       	mul	r28, r25
 2e0:	90 01       	movw	r18, r0
 2e2:	11 24       	eor	r1, r1
 2e4:	68 2f       	mov	r22, r24
 2e6:	62 2b       	or	r22, r18
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	0e 94 41 04 	call	0x882	; 0x882 <DIO_WritePort>
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	8b e0       	ldi	r24, 0x0B	; 11
 2f2:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <DIO_WriteChannel>
 2f6:	8f e8       	ldi	r24, 0x8F	; 143
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <LCD_Char+0x70>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <LCD_Char+0x76>
 300:	00 00       	nop
 302:	61 e0       	ldi	r22, 0x01	; 1
 304:	8b e0       	ldi	r24, 0x0B	; 11
 306:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <DIO_WriteChannel>
 30a:	8f e3       	ldi	r24, 0x3F	; 63
 30c:	9f e1       	ldi	r25, 0x1F	; 31
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <LCD_Char+0x84>
 312:	00 c0       	rjmp	.+0      	; 0x314 <LCD_Char+0x8a>
 314:	00 00       	nop
 316:	cf 91       	pop	r28
 318:	08 95       	ret

0000031a <LCD_String>:
 31a:	0f 93       	push	r16
 31c:	1f 93       	push	r17
 31e:	cf 93       	push	r28
 320:	fc 01       	movw	r30, r24
 322:	80 81       	ld	r24, Z
 324:	88 23       	and	r24, r24
 326:	59 f0       	breq	.+22     	; 0x33e <LCD_String+0x24>
 328:	8f 01       	movw	r16, r30
 32a:	c0 e0       	ldi	r28, 0x00	; 0
 32c:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_Char>
 330:	cf 5f       	subi	r28, 0xFF	; 255
 332:	f8 01       	movw	r30, r16
 334:	ec 0f       	add	r30, r28
 336:	f1 1d       	adc	r31, r1
 338:	80 81       	ld	r24, Z
 33a:	81 11       	cpse	r24, r1
 33c:	f7 cf       	rjmp	.-18     	; 0x32c <LCD_String+0x12>
 33e:	cf 91       	pop	r28
 340:	1f 91       	pop	r17
 342:	0f 91       	pop	r16
 344:	08 95       	ret

00000346 <LCD_Clear>:
void LCD_Clear(void){
	LCD_Cmd(0x01);
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_Cmd>
 34c:	08 95       	ret

0000034e <LCD_Int>:
}
void LCD_Int(int number) {
 34e:	0f 93       	push	r16
 350:	1f 93       	push	r17
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	cd b7       	in	r28, 0x3d	; 61
 358:	de b7       	in	r29, 0x3e	; 62
 35a:	60 97       	sbiw	r28, 0x10	; 16
 35c:	0f b6       	in	r0, 0x3f	; 63
 35e:	f8 94       	cli
 360:	de bf       	out	0x3e, r29	; 62
 362:	0f be       	out	0x3f, r0	; 63
 364:	cd bf       	out	0x3d, r28	; 61
	char buffer[16]; // Assuming a maximum of 16 digits for the result
	sprintf(buffer, "%d", number); // Convert integer to string
 366:	9f 93       	push	r25
 368:	8f 93       	push	r24
 36a:	88 eb       	ldi	r24, 0xB8	; 184
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	9f 93       	push	r25
 370:	8f 93       	push	r24
 372:	8e 01       	movw	r16, r28
 374:	0f 5f       	subi	r16, 0xFF	; 255
 376:	1f 4f       	sbci	r17, 0xFF	; 255
 378:	1f 93       	push	r17
 37a:	0f 93       	push	r16
 37c:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <sprintf>
	LCD_String(buffer); // Display the string on the LCD
 380:	c8 01       	movw	r24, r16
 382:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_String>
 386:	0f 90       	pop	r0
 388:	0f 90       	pop	r0
 38a:	0f 90       	pop	r0
 38c:	0f 90       	pop	r0
 38e:	0f 90       	pop	r0
 390:	0f 90       	pop	r0
 392:	60 96       	adiw	r28, 0x10	; 16
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	f8 94       	cli
 398:	de bf       	out	0x3e, r29	; 62
 39a:	0f be       	out	0x3f, r0	; 63
 39c:	cd bf       	out	0x3d, r28	; 61
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	1f 91       	pop	r17
 3a4:	0f 91       	pop	r16
 3a6:	08 95       	ret

000003a8 <solve>:
		solve();
	}
}

void solve()
{
 3a8:	8f 92       	push	r8
 3aa:	9f 92       	push	r9
 3ac:	af 92       	push	r10
 3ae:	bf 92       	push	r11
 3b0:	cf 92       	push	r12
 3b2:	df 92       	push	r13
 3b4:	ef 92       	push	r14
 3b6:	ff 92       	push	r15
 3b8:	0f 93       	push	r16
 3ba:	1f 93       	push	r17
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
 3c0:	cd b7       	in	r28, 0x3d	; 61
 3c2:	de b7       	in	r29, 0x3e	; 62
 3c4:	6e 97       	sbiw	r28, 0x1e	; 30
 3c6:	0f b6       	in	r0, 0x3f	; 63
 3c8:	f8 94       	cli
 3ca:	de bf       	out	0x3e, r29	; 62
 3cc:	0f be       	out	0x3f, r0	; 63
 3ce:	cd bf       	out	0x3d, r28	; 61
	//Check if the expression is not empty first
	if(current_length > 0)
 3d0:	c0 90 d0 00 	lds	r12, 0x00D0	; 0x8000d0 <current_length>
 3d4:	d0 90 d1 00 	lds	r13, 0x00D1	; 0x8000d1 <current_length+0x1>
 3d8:	1c 14       	cp	r1, r12
 3da:	1d 04       	cpc	r1, r13
 3dc:	0c f0       	brlt	.+2      	; 0x3e0 <solve+0x38>
 3de:	9d c0       	rjmp	.+314    	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 3e0:	8e 01       	movw	r16, r28
 3e2:	0b 5e       	subi	r16, 0xEB	; 235
 3e4:	1f 4f       	sbci	r17, 0xFF	; 255
 3e6:	ae 01       	movw	r20, r28
 3e8:	4f 5f       	subi	r20, 0xFF	; 255
 3ea:	5f 4f       	sbci	r21, 0xFF	; 255
 3ec:	7a 01       	movw	r14, r20
 3ee:	d8 01       	movw	r26, r16
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	70 e0       	ldi	r23, 0x00	; 0
 3f4:	40 e0       	ldi	r20, 0x00	; 0
 3f6:	50 e0       	ldi	r21, 0x00	; 0
		
		//Extract operands and operators
		while (i < current_length)
		{
			int operand = 0;
			while (expression[i] >= '0' && expression[i] <= '9')
 3f8:	81 2c       	mov	r8, r1
 3fa:	91 2c       	mov	r9, r1
 3fc:	30 c0       	rjmp	.+96     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
			{
				operand = operand * 10 + (expression[i] - '0');
 3fe:	5c 01       	movw	r10, r24
 400:	aa 0c       	add	r10, r10
 402:	bb 1c       	adc	r11, r11
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	8a 0d       	add	r24, r10
 412:	9b 1d       	adc	r25, r11
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	20 53       	subi	r18, 0x30	; 48
 418:	31 09       	sbc	r19, r1
 41a:	82 0f       	add	r24, r18
 41c:	93 1f       	adc	r25, r19
				i++;
 41e:	4f 5f       	subi	r20, 0xFF	; 255
 420:	5f 4f       	sbci	r21, 0xFF	; 255
		
		//Extract operands and operators
		while (i < current_length)
		{
			int operand = 0;
			while (expression[i] >= '0' && expression[i] <= '9')
 422:	21 91       	ld	r18, Z+
 424:	30 ed       	ldi	r19, 0xD0	; 208
 426:	32 0f       	add	r19, r18
 428:	3a 30       	cpi	r19, 0x0A	; 10
 42a:	48 f3       	brcs	.-46     	; 0x3fe <solve+0x56>
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 42e:	88 2d       	mov	r24, r8
 430:	99 2d       	mov	r25, r9
			{
				operand = operand * 10 + (expression[i] - '0');
				i++;
			}
			operands[op_count] = operand;
 432:	f7 01       	movw	r30, r14
 434:	81 93       	st	Z+, r24
 436:	91 93       	st	Z+, r25
 438:	7f 01       	movw	r14, r30
			op_count++;
 43a:	fb 01       	movw	r30, r22
 43c:	31 96       	adiw	r30, 0x01	; 1

			if (expression[i] == '+' || expression[i] == '-' || expression[i] == '*' || expression[i] == '/')
 43e:	82 2f       	mov	r24, r18
 440:	8d 7f       	andi	r24, 0xFD	; 253
 442:	8d 32       	cpi	r24, 0x2D	; 45
 444:	21 f0       	breq	.+8      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 446:	86 ed       	ldi	r24, 0xD6	; 214
 448:	82 0f       	add	r24, r18
 44a:	82 30       	cpi	r24, 0x02	; 2
 44c:	18 f4       	brcc	.+6      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			{
				operators[op_count - 1] = expression[i];
 44e:	2c 93       	st	X, r18
				i++;
 450:	4f 5f       	subi	r20, 0xFF	; 255
 452:	5f 4f       	sbci	r21, 0xFF	; 255
 454:	11 96       	adiw	r26, 0x01	; 1
		u8 operators[MAX_EXPRESSION_LENGTH/2];
		int op_count = 0;
		int i = 0;
		
		//Extract operands and operators
		while (i < current_length)
 456:	4c 15       	cp	r20, r12
 458:	5d 05       	cpc	r21, r13
 45a:	7c f4       	brge	.+30     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 45c:	bf 01       	movw	r22, r30
		{
			int operand = 0;
			while (expression[i] >= '0' && expression[i] <= '9')
 45e:	fa 01       	movw	r30, r20
 460:	e4 54       	subi	r30, 0x44	; 68
 462:	ff 4f       	sbci	r31, 0xFF	; 255
 464:	20 81       	ld	r18, Z
 466:	80 ed       	ldi	r24, 0xD0	; 208
 468:	82 0f       	add	r24, r18
 46a:	8a 30       	cpi	r24, 0x0A	; 10
 46c:	00 f7       	brcc	.-64     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 46e:	fa 01       	movw	r30, r20
 470:	e3 54       	subi	r30, 0x43	; 67
 472:	ff 4f       	sbci	r31, 0xFF	; 255
 474:	88 2d       	mov	r24, r8
 476:	99 2d       	mov	r25, r9
 478:	c2 cf       	rjmp	.-124    	; 0x3fe <solve+0x56>
				i++;
			}
		}

		// Perform calculations
		int result = operands[0];
 47a:	e9 80       	ldd	r14, Y+1	; 0x01
 47c:	fa 80       	ldd	r15, Y+2	; 0x02
		for (int j = 0; j < op_count - 1; j++)
 47e:	16 16       	cp	r1, r22
 480:	17 06       	cpc	r1, r23
 482:	ac f5       	brge	.+106    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 484:	fe 01       	movw	r30, r28
 486:	33 96       	adiw	r30, 0x03	; 3
 488:	25 e1       	ldi	r18, 0x15	; 21
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	2c 0f       	add	r18, r28
 48e:	3d 1f       	adc	r19, r29
 490:	26 0f       	add	r18, r22
 492:	37 1f       	adc	r19, r23
		{
			switch (operators[j])
 494:	d8 01       	movw	r26, r16
 496:	8d 91       	ld	r24, X+
 498:	8d 01       	movw	r16, r26
 49a:	8b 32       	cpi	r24, 0x2B	; 43
 49c:	49 f0       	breq	.+18     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 49e:	18 f4       	brcc	.+6      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 4a0:	8a 32       	cpi	r24, 0x2A	; 42
 4a2:	81 f0       	breq	.+32     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4a4:	20 c0       	rjmp	.+64     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4a6:	8d 32       	cpi	r24, 0x2D	; 45
 4a8:	41 f0       	breq	.+16     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4aa:	8f 32       	cpi	r24, 0x2F	; 47
 4ac:	b1 f0       	breq	.+44     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4ae:	1b c0       	rjmp	.+54     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
			{
				case '+':
				result += operands[j + 1];
 4b0:	80 81       	ld	r24, Z
 4b2:	91 81       	ldd	r25, Z+1	; 0x01
 4b4:	e8 0e       	add	r14, r24
 4b6:	f9 1e       	adc	r15, r25
				break;
 4b8:	16 c0       	rjmp	.+44     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
				case '-':
				result -= operands[j + 1];
 4ba:	80 81       	ld	r24, Z
 4bc:	91 81       	ldd	r25, Z+1	; 0x01
 4be:	e8 1a       	sub	r14, r24
 4c0:	f9 0a       	sbc	r15, r25
				break;
 4c2:	11 c0       	rjmp	.+34     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
				case '*':
				result *= operands[j + 1];
 4c4:	80 81       	ld	r24, Z
 4c6:	91 81       	ldd	r25, Z+1	; 0x01
 4c8:	a7 01       	movw	r20, r14
 4ca:	48 9f       	mul	r20, r24
 4cc:	70 01       	movw	r14, r0
 4ce:	49 9f       	mul	r20, r25
 4d0:	f0 0c       	add	r15, r0
 4d2:	58 9f       	mul	r21, r24
 4d4:	f0 0c       	add	r15, r0
 4d6:	11 24       	eor	r1, r1
				break;
 4d8:	06 c0       	rjmp	.+12     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
				case '/':
				result /= operands[j + 1];
 4da:	60 81       	ld	r22, Z
 4dc:	71 81       	ldd	r23, Z+1	; 0x01
 4de:	c7 01       	movw	r24, r14
 4e0:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__divmodhi4>
 4e4:	7b 01       	movw	r14, r22
 4e6:	32 96       	adiw	r30, 0x02	; 2
			}
		}

		// Perform calculations
		int result = operands[0];
		for (int j = 0; j < op_count - 1; j++)
 4e8:	20 17       	cp	r18, r16
 4ea:	31 07       	cpc	r19, r17
 4ec:	99 f6       	brne	.-90     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
				result /= operands[j + 1];
				break;
			}
		}

		LCD_Clear();
 4ee:	0e 94 a3 01 	call	0x346	; 0x346 <LCD_Clear>
		LCD_Int(result);
 4f2:	c7 01       	movw	r24, r14
 4f4:	0e 94 a7 01 	call	0x34e	; 0x34e <LCD_Int>
		current_length = 0;
 4f8:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <current_length+0x1>
 4fc:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <current_length>
		expression[0] = '\0';
 500:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 504:	5f ef       	ldi	r21, 0xFF	; 255
 506:	83 ed       	ldi	r24, 0xD3	; 211
 508:	90 e3       	ldi	r25, 0x30	; 48
 50a:	51 50       	subi	r21, 0x01	; 1
 50c:	80 40       	sbci	r24, 0x00	; 0
 50e:	90 40       	sbci	r25, 0x00	; 0
 510:	e1 f7       	brne	.-8      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 512:	00 c0       	rjmp	.+0      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 514:	00 00       	nop
		_delay_ms(1000);
		LCD_Clear();
 516:	0e 94 a3 01 	call	0x346	; 0x346 <LCD_Clear>
	}
 51a:	6e 96       	adiw	r28, 0x1e	; 30
 51c:	0f b6       	in	r0, 0x3f	; 63
 51e:	f8 94       	cli
 520:	de bf       	out	0x3e, r29	; 62
 522:	0f be       	out	0x3f, r0	; 63
 524:	cd bf       	out	0x3d, r28	; 61
 526:	df 91       	pop	r29
 528:	cf 91       	pop	r28
 52a:	1f 91       	pop	r17
 52c:	0f 91       	pop	r16
 52e:	ff 90       	pop	r15
 530:	ef 90       	pop	r14
 532:	df 90       	pop	r13
 534:	cf 90       	pop	r12
 536:	bf 90       	pop	r11
 538:	af 90       	pop	r10
 53a:	9f 90       	pop	r9
 53c:	8f 90       	pop	r8
 53e:	08 95       	ret

00000540 <processKey>:
}

void processKey(u8 key)
{
	//Checking valid keys
	if(key >= '0' && key <='9')
 540:	90 ed       	ldi	r25, 0xD0	; 208
 542:	98 0f       	add	r25, r24
 544:	9a 30       	cpi	r25, 0x0A	; 10
 546:	c8 f4       	brcc	.+50     	; 0x57a <processKey+0x3a>
	{
		//add digit to the expression
		if(current_length < MAX_EXPRESSION_LENGTH-1)
 548:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <current_length>
 54c:	30 91 d1 00 	lds	r19, 0x00D1	; 0x8000d1 <current_length+0x1>
 550:	23 31       	cpi	r18, 0x13	; 19
 552:	31 05       	cpc	r19, r1
 554:	0c f0       	brlt	.+2      	; 0x558 <processKey+0x18>
 556:	40 c0       	rjmp	.+128    	; 0x5d8 <processKey+0x98>
		{
			expression[current_length] = key;
 558:	f9 01       	movw	r30, r18
 55a:	e4 54       	subi	r30, 0x44	; 68
 55c:	ff 4f       	sbci	r31, 0xFF	; 255
 55e:	80 83       	st	Z, r24
			current_length++;
 560:	2f 5f       	subi	r18, 0xFF	; 255
 562:	3f 4f       	sbci	r19, 0xFF	; 255
 564:	30 93 d1 00 	sts	0x00D1, r19	; 0x8000d1 <current_length+0x1>
 568:	20 93 d0 00 	sts	0x00D0, r18	; 0x8000d0 <current_length>
			expression[current_length] = '\0'; //Terminate string
 56c:	f9 01       	movw	r30, r18
 56e:	e4 54       	subi	r30, 0x44	; 68
 570:	ff 4f       	sbci	r31, 0xFF	; 255
 572:	10 82       	st	Z, r1
			LCD_Char(key); //show the digit on LCD
 574:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_Char>
 578:	08 95       	ret
		}
	}
	else if(key == '+' || key == '-' || key == '*' || key == '/')
 57a:	98 2f       	mov	r25, r24
 57c:	9d 7f       	andi	r25, 0xFD	; 253
 57e:	9d 32       	cpi	r25, 0x2D	; 45
 580:	21 f0       	breq	.+8      	; 0x58a <processKey+0x4a>
 582:	96 ed       	ldi	r25, 0xD6	; 214
 584:	98 0f       	add	r25, r24
 586:	92 30       	cpi	r25, 0x02	; 2
 588:	c0 f4       	brcc	.+48     	; 0x5ba <processKey+0x7a>
	{
		//add the operators to the expression
		if(current_length < MAX_EXPRESSION_LENGTH-1)
 58a:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <current_length>
 58e:	30 91 d1 00 	lds	r19, 0x00D1	; 0x8000d1 <current_length+0x1>
 592:	23 31       	cpi	r18, 0x13	; 19
 594:	31 05       	cpc	r19, r1
 596:	04 f5       	brge	.+64     	; 0x5d8 <processKey+0x98>
		{
			expression[current_length] = key;
 598:	f9 01       	movw	r30, r18
 59a:	e4 54       	subi	r30, 0x44	; 68
 59c:	ff 4f       	sbci	r31, 0xFF	; 255
 59e:	80 83       	st	Z, r24
			current_length++;
 5a0:	2f 5f       	subi	r18, 0xFF	; 255
 5a2:	3f 4f       	sbci	r19, 0xFF	; 255
 5a4:	30 93 d1 00 	sts	0x00D1, r19	; 0x8000d1 <current_length+0x1>
 5a8:	20 93 d0 00 	sts	0x00D0, r18	; 0x8000d0 <current_length>
			expression[current_length] = '\0';
 5ac:	f9 01       	movw	r30, r18
 5ae:	e4 54       	subi	r30, 0x44	; 68
 5b0:	ff 4f       	sbci	r31, 0xFF	; 255
 5b2:	10 82       	st	Z, r1
			LCD_Char(key);
 5b4:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_Char>
 5b8:	08 95       	ret
		}
	}
	else if(key == 'C')
 5ba:	83 34       	cpi	r24, 0x43	; 67
 5bc:	49 f4       	brne	.+18     	; 0x5d0 <processKey+0x90>
	{
		expression[0] = '\0'; //clear expression
 5be:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__data_end>
		current_length = 0; //reset counter
 5c2:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <current_length+0x1>
 5c6:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <current_length>
		LCD_Clear(); //clear LCD display
 5ca:	0e 94 a3 01 	call	0x346	; 0x346 <LCD_Clear>
 5ce:	08 95       	ret
	}
	else if(key == '=')
 5d0:	8d 33       	cpi	r24, 0x3D	; 61
 5d2:	11 f4       	brne	.+4      	; 0x5d8 <processKey+0x98>
	{
		//Evaluate the Equation
		solve();
 5d4:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <solve>
 5d8:	08 95       	ret

000005da <main>:
void processKey(u8 key);
void solve();

int main()
{
	DIO_Init();
 5da:	0e 94 51 04 	call	0x8a2	; 0x8a2 <DIO_Init>
	LCD_Init();
 5de:	0e 94 24 01 	call	0x248	; 0x248 <LCD_Init>
	Keypad_Init();
 5e2:	0e 94 49 00 	call	0x92	; 0x92 <Keypad_Init>
	while (1)
	{
		u8 key = GetKey();
 5e6:	0e 94 80 00 	call	0x100	; 0x100 <GetKey>
		processKey(key);
 5ea:	0e 94 a0 02 	call	0x540	; 0x540 <processKey>
 5ee:	fb cf       	rjmp	.-10     	; 0x5e6 <main+0xc>

000005f0 <DIO_WriteChannel>:
		break;
		case DIO_PortC:
		ToggleBit(PORTC_Reg,BitNo);
		break;
		case DIO_PortD:
		ToggleBit(PORTD_Reg,BitNo);
 5f0:	98 2f       	mov	r25, r24
 5f2:	97 70       	andi	r25, 0x07	; 7
 5f4:	86 95       	lsr	r24
 5f6:	86 95       	lsr	r24
 5f8:	86 95       	lsr	r24
 5fa:	81 30       	cpi	r24, 0x01	; 1
 5fc:	21 f1       	breq	.+72     	; 0x646 <DIO_WriteChannel+0x56>
 5fe:	30 f0       	brcs	.+12     	; 0x60c <DIO_WriteChannel+0x1c>
 600:	82 30       	cpi	r24, 0x02	; 2
 602:	f1 f1       	breq	.+124    	; 0x680 <DIO_WriteChannel+0x90>
 604:	83 30       	cpi	r24, 0x03	; 3
 606:	09 f4       	brne	.+2      	; 0x60a <DIO_WriteChannel+0x1a>
 608:	58 c0       	rjmp	.+176    	; 0x6ba <DIO_WriteChannel+0xca>
 60a:	08 95       	ret
 60c:	61 30       	cpi	r22, 0x01	; 1
 60e:	69 f4       	brne	.+26     	; 0x62a <DIO_WriteChannel+0x3a>
 610:	4b b3       	in	r20, 0x1b	; 27
 612:	21 e0       	ldi	r18, 0x01	; 1
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	b9 01       	movw	r22, r18
 618:	02 c0       	rjmp	.+4      	; 0x61e <DIO_WriteChannel+0x2e>
 61a:	66 0f       	add	r22, r22
 61c:	77 1f       	adc	r23, r23
 61e:	9a 95       	dec	r25
 620:	e2 f7       	brpl	.-8      	; 0x61a <DIO_WriteChannel+0x2a>
 622:	cb 01       	movw	r24, r22
 624:	84 2b       	or	r24, r20
 626:	8b bb       	out	0x1b, r24	; 27
 628:	08 95       	ret
 62a:	4b b3       	in	r20, 0x1b	; 27
 62c:	21 e0       	ldi	r18, 0x01	; 1
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	b9 01       	movw	r22, r18
 632:	02 c0       	rjmp	.+4      	; 0x638 <DIO_WriteChannel+0x48>
 634:	66 0f       	add	r22, r22
 636:	77 1f       	adc	r23, r23
 638:	9a 95       	dec	r25
 63a:	e2 f7       	brpl	.-8      	; 0x634 <DIO_WriteChannel+0x44>
 63c:	cb 01       	movw	r24, r22
 63e:	80 95       	com	r24
 640:	84 23       	and	r24, r20
 642:	8b bb       	out	0x1b, r24	; 27
 644:	08 95       	ret
 646:	61 30       	cpi	r22, 0x01	; 1
 648:	69 f4       	brne	.+26     	; 0x664 <DIO_WriteChannel+0x74>
 64a:	48 b3       	in	r20, 0x18	; 24
 64c:	21 e0       	ldi	r18, 0x01	; 1
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	b9 01       	movw	r22, r18
 652:	02 c0       	rjmp	.+4      	; 0x658 <DIO_WriteChannel+0x68>
 654:	66 0f       	add	r22, r22
 656:	77 1f       	adc	r23, r23
 658:	9a 95       	dec	r25
 65a:	e2 f7       	brpl	.-8      	; 0x654 <DIO_WriteChannel+0x64>
 65c:	cb 01       	movw	r24, r22
 65e:	84 2b       	or	r24, r20
 660:	88 bb       	out	0x18, r24	; 24
 662:	08 95       	ret
 664:	48 b3       	in	r20, 0x18	; 24
 666:	21 e0       	ldi	r18, 0x01	; 1
 668:	30 e0       	ldi	r19, 0x00	; 0
 66a:	b9 01       	movw	r22, r18
 66c:	02 c0       	rjmp	.+4      	; 0x672 <DIO_WriteChannel+0x82>
 66e:	66 0f       	add	r22, r22
 670:	77 1f       	adc	r23, r23
 672:	9a 95       	dec	r25
 674:	e2 f7       	brpl	.-8      	; 0x66e <DIO_WriteChannel+0x7e>
 676:	cb 01       	movw	r24, r22
 678:	80 95       	com	r24
 67a:	84 23       	and	r24, r20
 67c:	88 bb       	out	0x18, r24	; 24
 67e:	08 95       	ret
 680:	61 30       	cpi	r22, 0x01	; 1
 682:	69 f4       	brne	.+26     	; 0x69e <DIO_WriteChannel+0xae>
 684:	45 b3       	in	r20, 0x15	; 21
 686:	21 e0       	ldi	r18, 0x01	; 1
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	b9 01       	movw	r22, r18
 68c:	02 c0       	rjmp	.+4      	; 0x692 <DIO_WriteChannel+0xa2>
 68e:	66 0f       	add	r22, r22
 690:	77 1f       	adc	r23, r23
 692:	9a 95       	dec	r25
 694:	e2 f7       	brpl	.-8      	; 0x68e <DIO_WriteChannel+0x9e>
 696:	cb 01       	movw	r24, r22
 698:	84 2b       	or	r24, r20
 69a:	85 bb       	out	0x15, r24	; 21
 69c:	08 95       	ret
 69e:	45 b3       	in	r20, 0x15	; 21
 6a0:	21 e0       	ldi	r18, 0x01	; 1
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	b9 01       	movw	r22, r18
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <DIO_WriteChannel+0xbc>
 6a8:	66 0f       	add	r22, r22
 6aa:	77 1f       	adc	r23, r23
 6ac:	9a 95       	dec	r25
 6ae:	e2 f7       	brpl	.-8      	; 0x6a8 <DIO_WriteChannel+0xb8>
 6b0:	cb 01       	movw	r24, r22
 6b2:	80 95       	com	r24
 6b4:	84 23       	and	r24, r20
 6b6:	85 bb       	out	0x15, r24	; 21
 6b8:	08 95       	ret
 6ba:	61 30       	cpi	r22, 0x01	; 1
 6bc:	69 f4       	brne	.+26     	; 0x6d8 <DIO_WriteChannel+0xe8>
 6be:	42 b3       	in	r20, 0x12	; 18
 6c0:	21 e0       	ldi	r18, 0x01	; 1
 6c2:	30 e0       	ldi	r19, 0x00	; 0
 6c4:	b9 01       	movw	r22, r18
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <DIO_WriteChannel+0xdc>
 6c8:	66 0f       	add	r22, r22
 6ca:	77 1f       	adc	r23, r23
 6cc:	9a 95       	dec	r25
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <DIO_WriteChannel+0xd8>
 6d0:	cb 01       	movw	r24, r22
 6d2:	84 2b       	or	r24, r20
 6d4:	82 bb       	out	0x12, r24	; 18
 6d6:	08 95       	ret
 6d8:	42 b3       	in	r20, 0x12	; 18
 6da:	21 e0       	ldi	r18, 0x01	; 1
 6dc:	30 e0       	ldi	r19, 0x00	; 0
 6de:	b9 01       	movw	r22, r18
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <DIO_WriteChannel+0xf6>
 6e2:	66 0f       	add	r22, r22
 6e4:	77 1f       	adc	r23, r23
 6e6:	9a 95       	dec	r25
 6e8:	e2 f7       	brpl	.-8      	; 0x6e2 <DIO_WriteChannel+0xf2>
 6ea:	cb 01       	movw	r24, r22
 6ec:	80 95       	com	r24
 6ee:	84 23       	and	r24, r20
 6f0:	82 bb       	out	0x12, r24	; 18
 6f2:	08 95       	ret

000006f4 <DIO_ReadChannel>:
 6f4:	28 2f       	mov	r18, r24
 6f6:	27 70       	andi	r18, 0x07	; 7
 6f8:	86 95       	lsr	r24
 6fa:	86 95       	lsr	r24
 6fc:	86 95       	lsr	r24
 6fe:	81 30       	cpi	r24, 0x01	; 1
 700:	79 f0       	breq	.+30     	; 0x720 <DIO_ReadChannel+0x2c>
 702:	28 f0       	brcs	.+10     	; 0x70e <DIO_ReadChannel+0x1a>
 704:	82 30       	cpi	r24, 0x02	; 2
 706:	a9 f0       	breq	.+42     	; 0x732 <DIO_ReadChannel+0x3e>
 708:	83 30       	cpi	r24, 0x03	; 3
 70a:	e1 f0       	breq	.+56     	; 0x744 <DIO_ReadChannel+0x50>
 70c:	24 c0       	rjmp	.+72     	; 0x756 <DIO_ReadChannel+0x62>
 70e:	89 b3       	in	r24, 0x19	; 25
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	02 c0       	rjmp	.+4      	; 0x718 <DIO_ReadChannel+0x24>
 714:	95 95       	asr	r25
 716:	87 95       	ror	r24
 718:	2a 95       	dec	r18
 71a:	e2 f7       	brpl	.-8      	; 0x714 <DIO_ReadChannel+0x20>
 71c:	81 70       	andi	r24, 0x01	; 1
 71e:	08 95       	ret
 720:	86 b3       	in	r24, 0x16	; 22
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	02 c0       	rjmp	.+4      	; 0x72a <DIO_ReadChannel+0x36>
 726:	95 95       	asr	r25
 728:	87 95       	ror	r24
 72a:	2a 95       	dec	r18
 72c:	e2 f7       	brpl	.-8      	; 0x726 <DIO_ReadChannel+0x32>
 72e:	81 70       	andi	r24, 0x01	; 1
 730:	08 95       	ret
 732:	83 b3       	in	r24, 0x13	; 19
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	02 c0       	rjmp	.+4      	; 0x73c <DIO_ReadChannel+0x48>
 738:	95 95       	asr	r25
 73a:	87 95       	ror	r24
 73c:	2a 95       	dec	r18
 73e:	e2 f7       	brpl	.-8      	; 0x738 <DIO_ReadChannel+0x44>
 740:	81 70       	andi	r24, 0x01	; 1
 742:	08 95       	ret
 744:	80 b3       	in	r24, 0x10	; 16
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	02 c0       	rjmp	.+4      	; 0x74e <DIO_ReadChannel+0x5a>
 74a:	95 95       	asr	r25
 74c:	87 95       	ror	r24
 74e:	2a 95       	dec	r18
 750:	e2 f7       	brpl	.-8      	; 0x74a <DIO_ReadChannel+0x56>
 752:	81 70       	andi	r24, 0x01	; 1
 754:	08 95       	ret
 756:	80 e0       	ldi	r24, 0x00	; 0
 758:	08 95       	ret

0000075a <DIO_ConfigChannel>:
		break;
	}
}
void DIO_ConfigChannel(DIO_ChannelTypes channelId,DIO_DataDir direction){
	DIO_PortTypes Portx = channelId/8;
	DIO_ChannelTypes BitNo = channelId%8;
 75a:	98 2f       	mov	r25, r24
 75c:	97 70       	andi	r25, 0x07	; 7
	switch(Portx){
 75e:	86 95       	lsr	r24
 760:	86 95       	lsr	r24
 762:	86 95       	lsr	r24
 764:	81 30       	cpi	r24, 0x01	; 1
 766:	21 f1       	breq	.+72     	; 0x7b0 <DIO_ConfigChannel+0x56>
 768:	30 f0       	brcs	.+12     	; 0x776 <DIO_ConfigChannel+0x1c>
 76a:	82 30       	cpi	r24, 0x02	; 2
 76c:	f1 f1       	breq	.+124    	; 0x7ea <DIO_ConfigChannel+0x90>
 76e:	83 30       	cpi	r24, 0x03	; 3
 770:	09 f4       	brne	.+2      	; 0x774 <DIO_ConfigChannel+0x1a>
 772:	58 c0       	rjmp	.+176    	; 0x824 <DIO_ConfigChannel+0xca>
 774:	08 95       	ret
		case DIO_PortA:
		if (direction == Output)
 776:	61 30       	cpi	r22, 0x01	; 1
 778:	69 f4       	brne	.+26     	; 0x794 <DIO_ConfigChannel+0x3a>
		{
			SetBit(DDRA_Reg,BitNo);
 77a:	4a b3       	in	r20, 0x1a	; 26
 77c:	21 e0       	ldi	r18, 0x01	; 1
 77e:	30 e0       	ldi	r19, 0x00	; 0
 780:	b9 01       	movw	r22, r18
 782:	02 c0       	rjmp	.+4      	; 0x788 <DIO_ConfigChannel+0x2e>
 784:	66 0f       	add	r22, r22
 786:	77 1f       	adc	r23, r23
 788:	9a 95       	dec	r25
 78a:	e2 f7       	brpl	.-8      	; 0x784 <DIO_ConfigChannel+0x2a>
 78c:	cb 01       	movw	r24, r22
 78e:	84 2b       	or	r24, r20
 790:	8a bb       	out	0x1a, r24	; 26
 792:	08 95       	ret
		}
		else
		{
			ClearBit(DDRA_Reg,BitNo);
 794:	4a b3       	in	r20, 0x1a	; 26
 796:	21 e0       	ldi	r18, 0x01	; 1
 798:	30 e0       	ldi	r19, 0x00	; 0
 79a:	b9 01       	movw	r22, r18
 79c:	02 c0       	rjmp	.+4      	; 0x7a2 <DIO_ConfigChannel+0x48>
 79e:	66 0f       	add	r22, r22
 7a0:	77 1f       	adc	r23, r23
 7a2:	9a 95       	dec	r25
 7a4:	e2 f7       	brpl	.-8      	; 0x79e <DIO_ConfigChannel+0x44>
 7a6:	cb 01       	movw	r24, r22
 7a8:	80 95       	com	r24
 7aa:	84 23       	and	r24, r20
 7ac:	8a bb       	out	0x1a, r24	; 26
 7ae:	08 95       	ret
		}
		break;
		case DIO_PortB:
		if (direction == Output)
 7b0:	61 30       	cpi	r22, 0x01	; 1
 7b2:	69 f4       	brne	.+26     	; 0x7ce <DIO_ConfigChannel+0x74>
		{
			SetBit(DDRB_Reg,BitNo);
 7b4:	47 b3       	in	r20, 0x17	; 23
 7b6:	21 e0       	ldi	r18, 0x01	; 1
 7b8:	30 e0       	ldi	r19, 0x00	; 0
 7ba:	b9 01       	movw	r22, r18
 7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <DIO_ConfigChannel+0x68>
 7be:	66 0f       	add	r22, r22
 7c0:	77 1f       	adc	r23, r23
 7c2:	9a 95       	dec	r25
 7c4:	e2 f7       	brpl	.-8      	; 0x7be <DIO_ConfigChannel+0x64>
 7c6:	cb 01       	movw	r24, r22
 7c8:	84 2b       	or	r24, r20
 7ca:	87 bb       	out	0x17, r24	; 23
 7cc:	08 95       	ret
		}
		else
		{
			ClearBit(DDRB_Reg,BitNo);
 7ce:	47 b3       	in	r20, 0x17	; 23
 7d0:	21 e0       	ldi	r18, 0x01	; 1
 7d2:	30 e0       	ldi	r19, 0x00	; 0
 7d4:	b9 01       	movw	r22, r18
 7d6:	02 c0       	rjmp	.+4      	; 0x7dc <DIO_ConfigChannel+0x82>
 7d8:	66 0f       	add	r22, r22
 7da:	77 1f       	adc	r23, r23
 7dc:	9a 95       	dec	r25
 7de:	e2 f7       	brpl	.-8      	; 0x7d8 <DIO_ConfigChannel+0x7e>
 7e0:	cb 01       	movw	r24, r22
 7e2:	80 95       	com	r24
 7e4:	84 23       	and	r24, r20
 7e6:	87 bb       	out	0x17, r24	; 23
 7e8:	08 95       	ret
		}
		break;
		case DIO_PortC:
		if (direction == Output)
 7ea:	61 30       	cpi	r22, 0x01	; 1
 7ec:	69 f4       	brne	.+26     	; 0x808 <DIO_ConfigChannel+0xae>
		{
			SetBit(DDRC_Reg,BitNo);
 7ee:	44 b3       	in	r20, 0x14	; 20
 7f0:	21 e0       	ldi	r18, 0x01	; 1
 7f2:	30 e0       	ldi	r19, 0x00	; 0
 7f4:	b9 01       	movw	r22, r18
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <DIO_ConfigChannel+0xa2>
 7f8:	66 0f       	add	r22, r22
 7fa:	77 1f       	adc	r23, r23
 7fc:	9a 95       	dec	r25
 7fe:	e2 f7       	brpl	.-8      	; 0x7f8 <DIO_ConfigChannel+0x9e>
 800:	cb 01       	movw	r24, r22
 802:	84 2b       	or	r24, r20
 804:	84 bb       	out	0x14, r24	; 20
 806:	08 95       	ret
		}
		else
		{
			ClearBit(DDRC_Reg,BitNo);
 808:	44 b3       	in	r20, 0x14	; 20
 80a:	21 e0       	ldi	r18, 0x01	; 1
 80c:	30 e0       	ldi	r19, 0x00	; 0
 80e:	b9 01       	movw	r22, r18
 810:	02 c0       	rjmp	.+4      	; 0x816 <DIO_ConfigChannel+0xbc>
 812:	66 0f       	add	r22, r22
 814:	77 1f       	adc	r23, r23
 816:	9a 95       	dec	r25
 818:	e2 f7       	brpl	.-8      	; 0x812 <DIO_ConfigChannel+0xb8>
 81a:	cb 01       	movw	r24, r22
 81c:	80 95       	com	r24
 81e:	84 23       	and	r24, r20
 820:	84 bb       	out	0x14, r24	; 20
 822:	08 95       	ret
		}
		break;
		case DIO_PortD:
		if (direction == Output)
 824:	61 30       	cpi	r22, 0x01	; 1
 826:	69 f4       	brne	.+26     	; 0x842 <DIO_ConfigChannel+0xe8>
		{
			SetBit(DDRD_Reg,BitNo);
 828:	41 b3       	in	r20, 0x11	; 17
 82a:	21 e0       	ldi	r18, 0x01	; 1
 82c:	30 e0       	ldi	r19, 0x00	; 0
 82e:	b9 01       	movw	r22, r18
 830:	02 c0       	rjmp	.+4      	; 0x836 <DIO_ConfigChannel+0xdc>
 832:	66 0f       	add	r22, r22
 834:	77 1f       	adc	r23, r23
 836:	9a 95       	dec	r25
 838:	e2 f7       	brpl	.-8      	; 0x832 <DIO_ConfigChannel+0xd8>
 83a:	cb 01       	movw	r24, r22
 83c:	84 2b       	or	r24, r20
 83e:	81 bb       	out	0x11, r24	; 17
 840:	08 95       	ret
		}
		else
		{
			ClearBit(DDRD_Reg,BitNo);
 842:	41 b3       	in	r20, 0x11	; 17
 844:	21 e0       	ldi	r18, 0x01	; 1
 846:	30 e0       	ldi	r19, 0x00	; 0
 848:	b9 01       	movw	r22, r18
 84a:	02 c0       	rjmp	.+4      	; 0x850 <DIO_ConfigChannel+0xf6>
 84c:	66 0f       	add	r22, r22
 84e:	77 1f       	adc	r23, r23
 850:	9a 95       	dec	r25
 852:	e2 f7       	brpl	.-8      	; 0x84c <DIO_ConfigChannel+0xf2>
 854:	cb 01       	movw	r24, r22
 856:	80 95       	com	r24
 858:	84 23       	and	r24, r20
 85a:	81 bb       	out	0x11, r24	; 17
 85c:	08 95       	ret

0000085e <DIO_ReadPort>:
		break;
	}
}
u8 DIO_ReadPort(DIO_PortTypes portId){
	u8 portValue = STD_Low;
	switch(portId){
 85e:	81 30       	cpi	r24, 0x01	; 1
 860:	41 f0       	breq	.+16     	; 0x872 <__stack+0x13>
 862:	28 f0       	brcs	.+10     	; 0x86e <__stack+0xf>
 864:	82 30       	cpi	r24, 0x02	; 2
 866:	39 f0       	breq	.+14     	; 0x876 <__stack+0x17>
 868:	83 30       	cpi	r24, 0x03	; 3
 86a:	39 f0       	breq	.+14     	; 0x87a <__stack+0x1b>
 86c:	08 c0       	rjmp	.+16     	; 0x87e <__stack+0x1f>
		case DIO_PortA:
		portValue = PORTA_Reg;
 86e:	8b b3       	in	r24, 0x1b	; 27
		break;
 870:	08 95       	ret
		case DIO_PortB:
		portValue = PORTB_Reg;
 872:	88 b3       	in	r24, 0x18	; 24
		break;
 874:	08 95       	ret
		case DIO_PortC:
		portValue = PORTC_Reg;
 876:	85 b3       	in	r24, 0x15	; 21
		break;
 878:	08 95       	ret
		case DIO_PortD:
		portValue = PORTD_Reg;
 87a:	82 b3       	in	r24, 0x12	; 18
		break;
 87c:	08 95       	ret
		}
		break;
	}
}
u8 DIO_ReadPort(DIO_PortTypes portId){
	u8 portValue = STD_Low;
 87e:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PortD:
		portValue = PORTD_Reg;
		break;
	}
	return portValue;
}
 880:	08 95       	ret

00000882 <DIO_WritePort>:
void DIO_WritePort(DIO_PortTypes portId,u8 portValue){
	switch(portId){
 882:	81 30       	cpi	r24, 0x01	; 1
 884:	41 f0       	breq	.+16     	; 0x896 <DIO_WritePort+0x14>
 886:	28 f0       	brcs	.+10     	; 0x892 <DIO_WritePort+0x10>
 888:	82 30       	cpi	r24, 0x02	; 2
 88a:	39 f0       	breq	.+14     	; 0x89a <DIO_WritePort+0x18>
 88c:	83 30       	cpi	r24, 0x03	; 3
 88e:	39 f0       	breq	.+14     	; 0x89e <DIO_WritePort+0x1c>
 890:	08 95       	ret
		case DIO_PortA:
		PORTA_Reg = portValue;
 892:	6b bb       	out	0x1b, r22	; 27
		break;
 894:	08 95       	ret
		case DIO_PortB:
		PORTB_Reg = portValue;
 896:	68 bb       	out	0x18, r22	; 24
		break;
 898:	08 95       	ret
		case DIO_PortC:
		PORTC_Reg = portValue;
 89a:	65 bb       	out	0x15, r22	; 21
		break;
 89c:	08 95       	ret
		case DIO_PortD:
		PORTD_Reg = portValue;
 89e:	62 bb       	out	0x12, r22	; 18
 8a0:	08 95       	ret

000008a2 <DIO_Init>:
	{Output,STD_High},
	{Output,STD_High},
	{Output,STD_High}
};

void DIO_Init(){
 8a2:	e8 e7       	ldi	r30, 0x78	; 120
 8a4:	f0 e0       	ldi	r31, 0x00	; 0
	DIO_ChannelTypes count = DIO_ChannelA0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	for (count = DIO_ChannelA0;count<PINCOUNT;count++)
 8a6:	80 e0       	ldi	r24, 0x00	; 0
			{
				SetBit(DDRB_Reg,BitNo);
			}
			else
			{
				ClearBit(DDRB_Reg,BitNo);
 8a8:	41 e0       	ldi	r20, 0x01	; 1
 8aa:	50 e0       	ldi	r21, 0x00	; 0
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	for (count = DIO_ChannelA0;count<PINCOUNT;count++)
	{
		Portx = count/8;
		BitNo = count%8;
 8ac:	28 2f       	mov	r18, r24
 8ae:	27 70       	andi	r18, 0x07	; 7
		switch(Portx){
 8b0:	98 2f       	mov	r25, r24
 8b2:	96 95       	lsr	r25
 8b4:	96 95       	lsr	r25
 8b6:	96 95       	lsr	r25
 8b8:	91 30       	cpi	r25, 0x01	; 1
 8ba:	09 f1       	breq	.+66     	; 0x8fe <DIO_Init+0x5c>
 8bc:	30 f0       	brcs	.+12     	; 0x8ca <DIO_Init+0x28>
 8be:	92 30       	cpi	r25, 0x02	; 2
 8c0:	c1 f1       	breq	.+112    	; 0x932 <DIO_Init+0x90>
 8c2:	93 30       	cpi	r25, 0x03	; 3
 8c4:	09 f4       	brne	.+2      	; 0x8c8 <DIO_Init+0x26>
 8c6:	4f c0       	rjmp	.+158    	; 0x966 <DIO_Init+0xc4>
 8c8:	67 c0       	rjmp	.+206    	; 0x998 <DIO_Init+0xf6>
			case DIO_PortA:
			if (PinCfg[count].direction == Output)
 8ca:	90 81       	ld	r25, Z
 8cc:	91 30       	cpi	r25, 0x01	; 1
 8ce:	59 f4       	brne	.+22     	; 0x8e6 <DIO_Init+0x44>
			{
				SetBit(DDRA_Reg,BitNo);
 8d0:	9a b3       	in	r25, 0x1a	; 26
 8d2:	ba 01       	movw	r22, r20
 8d4:	02 c0       	rjmp	.+4      	; 0x8da <DIO_Init+0x38>
 8d6:	66 0f       	add	r22, r22
 8d8:	77 1f       	adc	r23, r23
 8da:	2a 95       	dec	r18
 8dc:	e2 f7       	brpl	.-8      	; 0x8d6 <DIO_Init+0x34>
 8de:	9b 01       	movw	r18, r22
 8e0:	29 2b       	or	r18, r25
 8e2:	2a bb       	out	0x1a, r18	; 26
 8e4:	59 c0       	rjmp	.+178    	; 0x998 <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRA_Reg,BitNo);
 8e6:	3a b3       	in	r19, 0x1a	; 26
 8e8:	ba 01       	movw	r22, r20
 8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <DIO_Init+0x4e>
 8ec:	66 0f       	add	r22, r22
 8ee:	77 1f       	adc	r23, r23
 8f0:	2a 95       	dec	r18
 8f2:	e2 f7       	brpl	.-8      	; 0x8ec <DIO_Init+0x4a>
 8f4:	96 2f       	mov	r25, r22
 8f6:	90 95       	com	r25
 8f8:	93 23       	and	r25, r19
 8fa:	9a bb       	out	0x1a, r25	; 26
 8fc:	4d c0       	rjmp	.+154    	; 0x998 <DIO_Init+0xf6>
			}
			break;
			case DIO_PortB:
			if (PinCfg[count].direction == Output)
 8fe:	90 81       	ld	r25, Z
 900:	91 30       	cpi	r25, 0x01	; 1
 902:	59 f4       	brne	.+22     	; 0x91a <DIO_Init+0x78>
			{
				SetBit(DDRB_Reg,BitNo);
 904:	97 b3       	in	r25, 0x17	; 23
 906:	ba 01       	movw	r22, r20
 908:	02 c0       	rjmp	.+4      	; 0x90e <DIO_Init+0x6c>
 90a:	66 0f       	add	r22, r22
 90c:	77 1f       	adc	r23, r23
 90e:	2a 95       	dec	r18
 910:	e2 f7       	brpl	.-8      	; 0x90a <DIO_Init+0x68>
 912:	9b 01       	movw	r18, r22
 914:	29 2b       	or	r18, r25
 916:	27 bb       	out	0x17, r18	; 23
 918:	3f c0       	rjmp	.+126    	; 0x998 <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRB_Reg,BitNo);
 91a:	37 b3       	in	r19, 0x17	; 23
 91c:	ba 01       	movw	r22, r20
 91e:	02 c0       	rjmp	.+4      	; 0x924 <DIO_Init+0x82>
 920:	66 0f       	add	r22, r22
 922:	77 1f       	adc	r23, r23
 924:	2a 95       	dec	r18
 926:	e2 f7       	brpl	.-8      	; 0x920 <DIO_Init+0x7e>
 928:	96 2f       	mov	r25, r22
 92a:	90 95       	com	r25
 92c:	93 23       	and	r25, r19
 92e:	97 bb       	out	0x17, r25	; 23
 930:	33 c0       	rjmp	.+102    	; 0x998 <DIO_Init+0xf6>
			}
			break;
			case DIO_PortC:
			if (PinCfg[count].direction == Output)
 932:	90 81       	ld	r25, Z
 934:	91 30       	cpi	r25, 0x01	; 1
 936:	59 f4       	brne	.+22     	; 0x94e <DIO_Init+0xac>
			{
				SetBit(DDRC_Reg,BitNo);
 938:	94 b3       	in	r25, 0x14	; 20
 93a:	ba 01       	movw	r22, r20
 93c:	02 c0       	rjmp	.+4      	; 0x942 <DIO_Init+0xa0>
 93e:	66 0f       	add	r22, r22
 940:	77 1f       	adc	r23, r23
 942:	2a 95       	dec	r18
 944:	e2 f7       	brpl	.-8      	; 0x93e <DIO_Init+0x9c>
 946:	9b 01       	movw	r18, r22
 948:	29 2b       	or	r18, r25
 94a:	24 bb       	out	0x14, r18	; 20
 94c:	25 c0       	rjmp	.+74     	; 0x998 <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRC_Reg,BitNo);
 94e:	34 b3       	in	r19, 0x14	; 20
 950:	ba 01       	movw	r22, r20
 952:	02 c0       	rjmp	.+4      	; 0x958 <DIO_Init+0xb6>
 954:	66 0f       	add	r22, r22
 956:	77 1f       	adc	r23, r23
 958:	2a 95       	dec	r18
 95a:	e2 f7       	brpl	.-8      	; 0x954 <DIO_Init+0xb2>
 95c:	96 2f       	mov	r25, r22
 95e:	90 95       	com	r25
 960:	93 23       	and	r25, r19
 962:	94 bb       	out	0x14, r25	; 20
 964:	19 c0       	rjmp	.+50     	; 0x998 <DIO_Init+0xf6>
			}
			break;
			case DIO_PortD:
			if (PinCfg[count].direction == Output)
 966:	90 81       	ld	r25, Z
 968:	91 30       	cpi	r25, 0x01	; 1
 96a:	59 f4       	brne	.+22     	; 0x982 <DIO_Init+0xe0>
			{
				SetBit(DDRD_Reg,BitNo);
 96c:	91 b3       	in	r25, 0x11	; 17
 96e:	ba 01       	movw	r22, r20
 970:	02 c0       	rjmp	.+4      	; 0x976 <DIO_Init+0xd4>
 972:	66 0f       	add	r22, r22
 974:	77 1f       	adc	r23, r23
 976:	2a 95       	dec	r18
 978:	e2 f7       	brpl	.-8      	; 0x972 <DIO_Init+0xd0>
 97a:	9b 01       	movw	r18, r22
 97c:	29 2b       	or	r18, r25
 97e:	21 bb       	out	0x11, r18	; 17
 980:	0b c0       	rjmp	.+22     	; 0x998 <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRD_Reg,BitNo);
 982:	31 b3       	in	r19, 0x11	; 17
 984:	ba 01       	movw	r22, r20
 986:	02 c0       	rjmp	.+4      	; 0x98c <DIO_Init+0xea>
 988:	66 0f       	add	r22, r22
 98a:	77 1f       	adc	r23, r23
 98c:	2a 95       	dec	r18
 98e:	e2 f7       	brpl	.-8      	; 0x988 <DIO_Init+0xe6>
 990:	96 2f       	mov	r25, r22
 992:	90 95       	com	r25
 994:	93 23       	and	r25, r19
 996:	91 bb       	out	0x11, r25	; 17

void DIO_Init(){
	DIO_ChannelTypes count = DIO_ChannelA0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	for (count = DIO_ChannelA0;count<PINCOUNT;count++)
 998:	8f 5f       	subi	r24, 0xFF	; 255
 99a:	32 96       	adiw	r30, 0x02	; 2
 99c:	80 32       	cpi	r24, 0x20	; 32
 99e:	09 f0       	breq	.+2      	; 0x9a2 <DIO_Init+0x100>
 9a0:	85 cf       	rjmp	.-246    	; 0x8ac <DIO_Init+0xa>
				ClearBit(DDRD_Reg,BitNo);
			}
			break;
		}
	}
 9a2:	08 95       	ret

000009a4 <__divmodhi4>:
 9a4:	97 fb       	bst	r25, 7
 9a6:	07 2e       	mov	r0, r23
 9a8:	16 f4       	brtc	.+4      	; 0x9ae <__divmodhi4+0xa>
 9aa:	00 94       	com	r0
 9ac:	07 d0       	rcall	.+14     	; 0x9bc <__divmodhi4_neg1>
 9ae:	77 fd       	sbrc	r23, 7
 9b0:	09 d0       	rcall	.+18     	; 0x9c4 <__divmodhi4_neg2>
 9b2:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__udivmodhi4>
 9b6:	07 fc       	sbrc	r0, 7
 9b8:	05 d0       	rcall	.+10     	; 0x9c4 <__divmodhi4_neg2>
 9ba:	3e f4       	brtc	.+14     	; 0x9ca <__divmodhi4_exit>

000009bc <__divmodhi4_neg1>:
 9bc:	90 95       	com	r25
 9be:	81 95       	neg	r24
 9c0:	9f 4f       	sbci	r25, 0xFF	; 255
 9c2:	08 95       	ret

000009c4 <__divmodhi4_neg2>:
 9c4:	70 95       	com	r23
 9c6:	61 95       	neg	r22
 9c8:	7f 4f       	sbci	r23, 0xFF	; 255

000009ca <__divmodhi4_exit>:
 9ca:	08 95       	ret

000009cc <__udivmodhi4>:
 9cc:	aa 1b       	sub	r26, r26
 9ce:	bb 1b       	sub	r27, r27
 9d0:	51 e1       	ldi	r21, 0x11	; 17
 9d2:	07 c0       	rjmp	.+14     	; 0x9e2 <__udivmodhi4_ep>

000009d4 <__udivmodhi4_loop>:
 9d4:	aa 1f       	adc	r26, r26
 9d6:	bb 1f       	adc	r27, r27
 9d8:	a6 17       	cp	r26, r22
 9da:	b7 07       	cpc	r27, r23
 9dc:	10 f0       	brcs	.+4      	; 0x9e2 <__udivmodhi4_ep>
 9de:	a6 1b       	sub	r26, r22
 9e0:	b7 0b       	sbc	r27, r23

000009e2 <__udivmodhi4_ep>:
 9e2:	88 1f       	adc	r24, r24
 9e4:	99 1f       	adc	r25, r25
 9e6:	5a 95       	dec	r21
 9e8:	a9 f7       	brne	.-22     	; 0x9d4 <__udivmodhi4_loop>
 9ea:	80 95       	com	r24
 9ec:	90 95       	com	r25
 9ee:	bc 01       	movw	r22, r24
 9f0:	cd 01       	movw	r24, r26
 9f2:	08 95       	ret

000009f4 <sprintf>:
 9f4:	ae e0       	ldi	r26, 0x0E	; 14
 9f6:	b0 e0       	ldi	r27, 0x00	; 0
 9f8:	e0 e0       	ldi	r30, 0x00	; 0
 9fa:	f5 e0       	ldi	r31, 0x05	; 5
 9fc:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__prologue_saves__+0x1c>
 a00:	0d 89       	ldd	r16, Y+21	; 0x15
 a02:	1e 89       	ldd	r17, Y+22	; 0x16
 a04:	86 e0       	ldi	r24, 0x06	; 6
 a06:	8c 83       	std	Y+4, r24	; 0x04
 a08:	1a 83       	std	Y+2, r17	; 0x02
 a0a:	09 83       	std	Y+1, r16	; 0x01
 a0c:	8f ef       	ldi	r24, 0xFF	; 255
 a0e:	9f e7       	ldi	r25, 0x7F	; 127
 a10:	9e 83       	std	Y+6, r25	; 0x06
 a12:	8d 83       	std	Y+5, r24	; 0x05
 a14:	ae 01       	movw	r20, r28
 a16:	47 5e       	subi	r20, 0xE7	; 231
 a18:	5f 4f       	sbci	r21, 0xFF	; 255
 a1a:	6f 89       	ldd	r22, Y+23	; 0x17
 a1c:	78 8d       	ldd	r23, Y+24	; 0x18
 a1e:	ce 01       	movw	r24, r28
 a20:	01 96       	adiw	r24, 0x01	; 1
 a22:	0e 94 1c 05 	call	0xa38	; 0xa38 <vfprintf>
 a26:	ef 81       	ldd	r30, Y+7	; 0x07
 a28:	f8 85       	ldd	r31, Y+8	; 0x08
 a2a:	e0 0f       	add	r30, r16
 a2c:	f1 1f       	adc	r31, r17
 a2e:	10 82       	st	Z, r1
 a30:	2e 96       	adiw	r28, 0x0e	; 14
 a32:	e4 e0       	ldi	r30, 0x04	; 4
 a34:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__epilogue_restores__+0x1c>

00000a38 <vfprintf>:
 a38:	ab e0       	ldi	r26, 0x0B	; 11
 a3a:	b0 e0       	ldi	r27, 0x00	; 0
 a3c:	e2 e2       	ldi	r30, 0x22	; 34
 a3e:	f5 e0       	ldi	r31, 0x05	; 5
 a40:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <__prologue_saves__>
 a44:	6c 01       	movw	r12, r24
 a46:	7b 01       	movw	r14, r22
 a48:	8a 01       	movw	r16, r20
 a4a:	fc 01       	movw	r30, r24
 a4c:	17 82       	std	Z+7, r1	; 0x07
 a4e:	16 82       	std	Z+6, r1	; 0x06
 a50:	83 81       	ldd	r24, Z+3	; 0x03
 a52:	81 ff       	sbrs	r24, 1
 a54:	cc c1       	rjmp	.+920    	; 0xdee <vfprintf+0x3b6>
 a56:	ce 01       	movw	r24, r28
 a58:	01 96       	adiw	r24, 0x01	; 1
 a5a:	3c 01       	movw	r6, r24
 a5c:	f6 01       	movw	r30, r12
 a5e:	93 81       	ldd	r25, Z+3	; 0x03
 a60:	f7 01       	movw	r30, r14
 a62:	93 fd       	sbrc	r25, 3
 a64:	85 91       	lpm	r24, Z+
 a66:	93 ff       	sbrs	r25, 3
 a68:	81 91       	ld	r24, Z+
 a6a:	7f 01       	movw	r14, r30
 a6c:	88 23       	and	r24, r24
 a6e:	09 f4       	brne	.+2      	; 0xa72 <vfprintf+0x3a>
 a70:	ba c1       	rjmp	.+884    	; 0xde6 <vfprintf+0x3ae>
 a72:	85 32       	cpi	r24, 0x25	; 37
 a74:	39 f4       	brne	.+14     	; 0xa84 <vfprintf+0x4c>
 a76:	93 fd       	sbrc	r25, 3
 a78:	85 91       	lpm	r24, Z+
 a7a:	93 ff       	sbrs	r25, 3
 a7c:	81 91       	ld	r24, Z+
 a7e:	7f 01       	movw	r14, r30
 a80:	85 32       	cpi	r24, 0x25	; 37
 a82:	29 f4       	brne	.+10     	; 0xa8e <vfprintf+0x56>
 a84:	b6 01       	movw	r22, r12
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
 a8c:	e7 cf       	rjmp	.-50     	; 0xa5c <vfprintf+0x24>
 a8e:	91 2c       	mov	r9, r1
 a90:	21 2c       	mov	r2, r1
 a92:	31 2c       	mov	r3, r1
 a94:	ff e1       	ldi	r31, 0x1F	; 31
 a96:	f3 15       	cp	r31, r3
 a98:	d8 f0       	brcs	.+54     	; 0xad0 <vfprintf+0x98>
 a9a:	8b 32       	cpi	r24, 0x2B	; 43
 a9c:	79 f0       	breq	.+30     	; 0xabc <vfprintf+0x84>
 a9e:	38 f4       	brcc	.+14     	; 0xaae <vfprintf+0x76>
 aa0:	80 32       	cpi	r24, 0x20	; 32
 aa2:	79 f0       	breq	.+30     	; 0xac2 <vfprintf+0x8a>
 aa4:	83 32       	cpi	r24, 0x23	; 35
 aa6:	a1 f4       	brne	.+40     	; 0xad0 <vfprintf+0x98>
 aa8:	23 2d       	mov	r18, r3
 aaa:	20 61       	ori	r18, 0x10	; 16
 aac:	1d c0       	rjmp	.+58     	; 0xae8 <vfprintf+0xb0>
 aae:	8d 32       	cpi	r24, 0x2D	; 45
 ab0:	61 f0       	breq	.+24     	; 0xaca <vfprintf+0x92>
 ab2:	80 33       	cpi	r24, 0x30	; 48
 ab4:	69 f4       	brne	.+26     	; 0xad0 <vfprintf+0x98>
 ab6:	23 2d       	mov	r18, r3
 ab8:	21 60       	ori	r18, 0x01	; 1
 aba:	16 c0       	rjmp	.+44     	; 0xae8 <vfprintf+0xb0>
 abc:	83 2d       	mov	r24, r3
 abe:	82 60       	ori	r24, 0x02	; 2
 ac0:	38 2e       	mov	r3, r24
 ac2:	e3 2d       	mov	r30, r3
 ac4:	e4 60       	ori	r30, 0x04	; 4
 ac6:	3e 2e       	mov	r3, r30
 ac8:	2a c0       	rjmp	.+84     	; 0xb1e <vfprintf+0xe6>
 aca:	f3 2d       	mov	r31, r3
 acc:	f8 60       	ori	r31, 0x08	; 8
 ace:	1d c0       	rjmp	.+58     	; 0xb0a <vfprintf+0xd2>
 ad0:	37 fc       	sbrc	r3, 7
 ad2:	2d c0       	rjmp	.+90     	; 0xb2e <vfprintf+0xf6>
 ad4:	20 ed       	ldi	r18, 0xD0	; 208
 ad6:	28 0f       	add	r18, r24
 ad8:	2a 30       	cpi	r18, 0x0A	; 10
 ada:	40 f0       	brcs	.+16     	; 0xaec <vfprintf+0xb4>
 adc:	8e 32       	cpi	r24, 0x2E	; 46
 ade:	b9 f4       	brne	.+46     	; 0xb0e <vfprintf+0xd6>
 ae0:	36 fc       	sbrc	r3, 6
 ae2:	81 c1       	rjmp	.+770    	; 0xde6 <vfprintf+0x3ae>
 ae4:	23 2d       	mov	r18, r3
 ae6:	20 64       	ori	r18, 0x40	; 64
 ae8:	32 2e       	mov	r3, r18
 aea:	19 c0       	rjmp	.+50     	; 0xb1e <vfprintf+0xe6>
 aec:	36 fe       	sbrs	r3, 6
 aee:	06 c0       	rjmp	.+12     	; 0xafc <vfprintf+0xc4>
 af0:	8a e0       	ldi	r24, 0x0A	; 10
 af2:	98 9e       	mul	r9, r24
 af4:	20 0d       	add	r18, r0
 af6:	11 24       	eor	r1, r1
 af8:	92 2e       	mov	r9, r18
 afa:	11 c0       	rjmp	.+34     	; 0xb1e <vfprintf+0xe6>
 afc:	ea e0       	ldi	r30, 0x0A	; 10
 afe:	2e 9e       	mul	r2, r30
 b00:	20 0d       	add	r18, r0
 b02:	11 24       	eor	r1, r1
 b04:	22 2e       	mov	r2, r18
 b06:	f3 2d       	mov	r31, r3
 b08:	f0 62       	ori	r31, 0x20	; 32
 b0a:	3f 2e       	mov	r3, r31
 b0c:	08 c0       	rjmp	.+16     	; 0xb1e <vfprintf+0xe6>
 b0e:	8c 36       	cpi	r24, 0x6C	; 108
 b10:	21 f4       	brne	.+8      	; 0xb1a <vfprintf+0xe2>
 b12:	83 2d       	mov	r24, r3
 b14:	80 68       	ori	r24, 0x80	; 128
 b16:	38 2e       	mov	r3, r24
 b18:	02 c0       	rjmp	.+4      	; 0xb1e <vfprintf+0xe6>
 b1a:	88 36       	cpi	r24, 0x68	; 104
 b1c:	41 f4       	brne	.+16     	; 0xb2e <vfprintf+0xf6>
 b1e:	f7 01       	movw	r30, r14
 b20:	93 fd       	sbrc	r25, 3
 b22:	85 91       	lpm	r24, Z+
 b24:	93 ff       	sbrs	r25, 3
 b26:	81 91       	ld	r24, Z+
 b28:	7f 01       	movw	r14, r30
 b2a:	81 11       	cpse	r24, r1
 b2c:	b3 cf       	rjmp	.-154    	; 0xa94 <vfprintf+0x5c>
 b2e:	98 2f       	mov	r25, r24
 b30:	9f 7d       	andi	r25, 0xDF	; 223
 b32:	95 54       	subi	r25, 0x45	; 69
 b34:	93 30       	cpi	r25, 0x03	; 3
 b36:	28 f4       	brcc	.+10     	; 0xb42 <vfprintf+0x10a>
 b38:	0c 5f       	subi	r16, 0xFC	; 252
 b3a:	1f 4f       	sbci	r17, 0xFF	; 255
 b3c:	9f e3       	ldi	r25, 0x3F	; 63
 b3e:	99 83       	std	Y+1, r25	; 0x01
 b40:	0d c0       	rjmp	.+26     	; 0xb5c <vfprintf+0x124>
 b42:	83 36       	cpi	r24, 0x63	; 99
 b44:	31 f0       	breq	.+12     	; 0xb52 <vfprintf+0x11a>
 b46:	83 37       	cpi	r24, 0x73	; 115
 b48:	71 f0       	breq	.+28     	; 0xb66 <vfprintf+0x12e>
 b4a:	83 35       	cpi	r24, 0x53	; 83
 b4c:	09 f0       	breq	.+2      	; 0xb50 <vfprintf+0x118>
 b4e:	59 c0       	rjmp	.+178    	; 0xc02 <vfprintf+0x1ca>
 b50:	21 c0       	rjmp	.+66     	; 0xb94 <vfprintf+0x15c>
 b52:	f8 01       	movw	r30, r16
 b54:	80 81       	ld	r24, Z
 b56:	89 83       	std	Y+1, r24	; 0x01
 b58:	0e 5f       	subi	r16, 0xFE	; 254
 b5a:	1f 4f       	sbci	r17, 0xFF	; 255
 b5c:	88 24       	eor	r8, r8
 b5e:	83 94       	inc	r8
 b60:	91 2c       	mov	r9, r1
 b62:	53 01       	movw	r10, r6
 b64:	13 c0       	rjmp	.+38     	; 0xb8c <vfprintf+0x154>
 b66:	28 01       	movw	r4, r16
 b68:	f2 e0       	ldi	r31, 0x02	; 2
 b6a:	4f 0e       	add	r4, r31
 b6c:	51 1c       	adc	r5, r1
 b6e:	f8 01       	movw	r30, r16
 b70:	a0 80       	ld	r10, Z
 b72:	b1 80       	ldd	r11, Z+1	; 0x01
 b74:	36 fe       	sbrs	r3, 6
 b76:	03 c0       	rjmp	.+6      	; 0xb7e <vfprintf+0x146>
 b78:	69 2d       	mov	r22, r9
 b7a:	70 e0       	ldi	r23, 0x00	; 0
 b7c:	02 c0       	rjmp	.+4      	; 0xb82 <vfprintf+0x14a>
 b7e:	6f ef       	ldi	r22, 0xFF	; 255
 b80:	7f ef       	ldi	r23, 0xFF	; 255
 b82:	c5 01       	movw	r24, r10
 b84:	0e 94 08 07 	call	0xe10	; 0xe10 <strnlen>
 b88:	4c 01       	movw	r8, r24
 b8a:	82 01       	movw	r16, r4
 b8c:	f3 2d       	mov	r31, r3
 b8e:	ff 77       	andi	r31, 0x7F	; 127
 b90:	3f 2e       	mov	r3, r31
 b92:	16 c0       	rjmp	.+44     	; 0xbc0 <vfprintf+0x188>
 b94:	28 01       	movw	r4, r16
 b96:	22 e0       	ldi	r18, 0x02	; 2
 b98:	42 0e       	add	r4, r18
 b9a:	51 1c       	adc	r5, r1
 b9c:	f8 01       	movw	r30, r16
 b9e:	a0 80       	ld	r10, Z
 ba0:	b1 80       	ldd	r11, Z+1	; 0x01
 ba2:	36 fe       	sbrs	r3, 6
 ba4:	03 c0       	rjmp	.+6      	; 0xbac <vfprintf+0x174>
 ba6:	69 2d       	mov	r22, r9
 ba8:	70 e0       	ldi	r23, 0x00	; 0
 baa:	02 c0       	rjmp	.+4      	; 0xbb0 <vfprintf+0x178>
 bac:	6f ef       	ldi	r22, 0xFF	; 255
 bae:	7f ef       	ldi	r23, 0xFF	; 255
 bb0:	c5 01       	movw	r24, r10
 bb2:	0e 94 fd 06 	call	0xdfa	; 0xdfa <strnlen_P>
 bb6:	4c 01       	movw	r8, r24
 bb8:	f3 2d       	mov	r31, r3
 bba:	f0 68       	ori	r31, 0x80	; 128
 bbc:	3f 2e       	mov	r3, r31
 bbe:	82 01       	movw	r16, r4
 bc0:	33 fc       	sbrc	r3, 3
 bc2:	1b c0       	rjmp	.+54     	; 0xbfa <vfprintf+0x1c2>
 bc4:	82 2d       	mov	r24, r2
 bc6:	90 e0       	ldi	r25, 0x00	; 0
 bc8:	88 16       	cp	r8, r24
 bca:	99 06       	cpc	r9, r25
 bcc:	b0 f4       	brcc	.+44     	; 0xbfa <vfprintf+0x1c2>
 bce:	b6 01       	movw	r22, r12
 bd0:	80 e2       	ldi	r24, 0x20	; 32
 bd2:	90 e0       	ldi	r25, 0x00	; 0
 bd4:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
 bd8:	2a 94       	dec	r2
 bda:	f4 cf       	rjmp	.-24     	; 0xbc4 <vfprintf+0x18c>
 bdc:	f5 01       	movw	r30, r10
 bde:	37 fc       	sbrc	r3, 7
 be0:	85 91       	lpm	r24, Z+
 be2:	37 fe       	sbrs	r3, 7
 be4:	81 91       	ld	r24, Z+
 be6:	5f 01       	movw	r10, r30
 be8:	b6 01       	movw	r22, r12
 bea:	90 e0       	ldi	r25, 0x00	; 0
 bec:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
 bf0:	21 10       	cpse	r2, r1
 bf2:	2a 94       	dec	r2
 bf4:	21 e0       	ldi	r18, 0x01	; 1
 bf6:	82 1a       	sub	r8, r18
 bf8:	91 08       	sbc	r9, r1
 bfa:	81 14       	cp	r8, r1
 bfc:	91 04       	cpc	r9, r1
 bfe:	71 f7       	brne	.-36     	; 0xbdc <vfprintf+0x1a4>
 c00:	e8 c0       	rjmp	.+464    	; 0xdd2 <vfprintf+0x39a>
 c02:	84 36       	cpi	r24, 0x64	; 100
 c04:	11 f0       	breq	.+4      	; 0xc0a <vfprintf+0x1d2>
 c06:	89 36       	cpi	r24, 0x69	; 105
 c08:	41 f5       	brne	.+80     	; 0xc5a <vfprintf+0x222>
 c0a:	f8 01       	movw	r30, r16
 c0c:	37 fe       	sbrs	r3, 7
 c0e:	07 c0       	rjmp	.+14     	; 0xc1e <vfprintf+0x1e6>
 c10:	60 81       	ld	r22, Z
 c12:	71 81       	ldd	r23, Z+1	; 0x01
 c14:	82 81       	ldd	r24, Z+2	; 0x02
 c16:	93 81       	ldd	r25, Z+3	; 0x03
 c18:	0c 5f       	subi	r16, 0xFC	; 252
 c1a:	1f 4f       	sbci	r17, 0xFF	; 255
 c1c:	08 c0       	rjmp	.+16     	; 0xc2e <vfprintf+0x1f6>
 c1e:	60 81       	ld	r22, Z
 c20:	71 81       	ldd	r23, Z+1	; 0x01
 c22:	07 2e       	mov	r0, r23
 c24:	00 0c       	add	r0, r0
 c26:	88 0b       	sbc	r24, r24
 c28:	99 0b       	sbc	r25, r25
 c2a:	0e 5f       	subi	r16, 0xFE	; 254
 c2c:	1f 4f       	sbci	r17, 0xFF	; 255
 c2e:	f3 2d       	mov	r31, r3
 c30:	ff 76       	andi	r31, 0x6F	; 111
 c32:	3f 2e       	mov	r3, r31
 c34:	97 ff       	sbrs	r25, 7
 c36:	09 c0       	rjmp	.+18     	; 0xc4a <vfprintf+0x212>
 c38:	90 95       	com	r25
 c3a:	80 95       	com	r24
 c3c:	70 95       	com	r23
 c3e:	61 95       	neg	r22
 c40:	7f 4f       	sbci	r23, 0xFF	; 255
 c42:	8f 4f       	sbci	r24, 0xFF	; 255
 c44:	9f 4f       	sbci	r25, 0xFF	; 255
 c46:	f0 68       	ori	r31, 0x80	; 128
 c48:	3f 2e       	mov	r3, r31
 c4a:	2a e0       	ldi	r18, 0x0A	; 10
 c4c:	30 e0       	ldi	r19, 0x00	; 0
 c4e:	a3 01       	movw	r20, r6
 c50:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__ultoa_invert>
 c54:	88 2e       	mov	r8, r24
 c56:	86 18       	sub	r8, r6
 c58:	45 c0       	rjmp	.+138    	; 0xce4 <vfprintf+0x2ac>
 c5a:	85 37       	cpi	r24, 0x75	; 117
 c5c:	31 f4       	brne	.+12     	; 0xc6a <vfprintf+0x232>
 c5e:	23 2d       	mov	r18, r3
 c60:	2f 7e       	andi	r18, 0xEF	; 239
 c62:	b2 2e       	mov	r11, r18
 c64:	2a e0       	ldi	r18, 0x0A	; 10
 c66:	30 e0       	ldi	r19, 0x00	; 0
 c68:	25 c0       	rjmp	.+74     	; 0xcb4 <vfprintf+0x27c>
 c6a:	93 2d       	mov	r25, r3
 c6c:	99 7f       	andi	r25, 0xF9	; 249
 c6e:	b9 2e       	mov	r11, r25
 c70:	8f 36       	cpi	r24, 0x6F	; 111
 c72:	c1 f0       	breq	.+48     	; 0xca4 <vfprintf+0x26c>
 c74:	18 f4       	brcc	.+6      	; 0xc7c <vfprintf+0x244>
 c76:	88 35       	cpi	r24, 0x58	; 88
 c78:	79 f0       	breq	.+30     	; 0xc98 <vfprintf+0x260>
 c7a:	b5 c0       	rjmp	.+362    	; 0xde6 <vfprintf+0x3ae>
 c7c:	80 37       	cpi	r24, 0x70	; 112
 c7e:	19 f0       	breq	.+6      	; 0xc86 <vfprintf+0x24e>
 c80:	88 37       	cpi	r24, 0x78	; 120
 c82:	21 f0       	breq	.+8      	; 0xc8c <vfprintf+0x254>
 c84:	b0 c0       	rjmp	.+352    	; 0xde6 <vfprintf+0x3ae>
 c86:	e9 2f       	mov	r30, r25
 c88:	e0 61       	ori	r30, 0x10	; 16
 c8a:	be 2e       	mov	r11, r30
 c8c:	b4 fe       	sbrs	r11, 4
 c8e:	0d c0       	rjmp	.+26     	; 0xcaa <vfprintf+0x272>
 c90:	fb 2d       	mov	r31, r11
 c92:	f4 60       	ori	r31, 0x04	; 4
 c94:	bf 2e       	mov	r11, r31
 c96:	09 c0       	rjmp	.+18     	; 0xcaa <vfprintf+0x272>
 c98:	34 fe       	sbrs	r3, 4
 c9a:	0a c0       	rjmp	.+20     	; 0xcb0 <vfprintf+0x278>
 c9c:	29 2f       	mov	r18, r25
 c9e:	26 60       	ori	r18, 0x06	; 6
 ca0:	b2 2e       	mov	r11, r18
 ca2:	06 c0       	rjmp	.+12     	; 0xcb0 <vfprintf+0x278>
 ca4:	28 e0       	ldi	r18, 0x08	; 8
 ca6:	30 e0       	ldi	r19, 0x00	; 0
 ca8:	05 c0       	rjmp	.+10     	; 0xcb4 <vfprintf+0x27c>
 caa:	20 e1       	ldi	r18, 0x10	; 16
 cac:	30 e0       	ldi	r19, 0x00	; 0
 cae:	02 c0       	rjmp	.+4      	; 0xcb4 <vfprintf+0x27c>
 cb0:	20 e1       	ldi	r18, 0x10	; 16
 cb2:	32 e0       	ldi	r19, 0x02	; 2
 cb4:	f8 01       	movw	r30, r16
 cb6:	b7 fe       	sbrs	r11, 7
 cb8:	07 c0       	rjmp	.+14     	; 0xcc8 <vfprintf+0x290>
 cba:	60 81       	ld	r22, Z
 cbc:	71 81       	ldd	r23, Z+1	; 0x01
 cbe:	82 81       	ldd	r24, Z+2	; 0x02
 cc0:	93 81       	ldd	r25, Z+3	; 0x03
 cc2:	0c 5f       	subi	r16, 0xFC	; 252
 cc4:	1f 4f       	sbci	r17, 0xFF	; 255
 cc6:	06 c0       	rjmp	.+12     	; 0xcd4 <vfprintf+0x29c>
 cc8:	60 81       	ld	r22, Z
 cca:	71 81       	ldd	r23, Z+1	; 0x01
 ccc:	80 e0       	ldi	r24, 0x00	; 0
 cce:	90 e0       	ldi	r25, 0x00	; 0
 cd0:	0e 5f       	subi	r16, 0xFE	; 254
 cd2:	1f 4f       	sbci	r17, 0xFF	; 255
 cd4:	a3 01       	movw	r20, r6
 cd6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__ultoa_invert>
 cda:	88 2e       	mov	r8, r24
 cdc:	86 18       	sub	r8, r6
 cde:	fb 2d       	mov	r31, r11
 ce0:	ff 77       	andi	r31, 0x7F	; 127
 ce2:	3f 2e       	mov	r3, r31
 ce4:	36 fe       	sbrs	r3, 6
 ce6:	0d c0       	rjmp	.+26     	; 0xd02 <vfprintf+0x2ca>
 ce8:	23 2d       	mov	r18, r3
 cea:	2e 7f       	andi	r18, 0xFE	; 254
 cec:	a2 2e       	mov	r10, r18
 cee:	89 14       	cp	r8, r9
 cf0:	58 f4       	brcc	.+22     	; 0xd08 <vfprintf+0x2d0>
 cf2:	34 fe       	sbrs	r3, 4
 cf4:	0b c0       	rjmp	.+22     	; 0xd0c <vfprintf+0x2d4>
 cf6:	32 fc       	sbrc	r3, 2
 cf8:	09 c0       	rjmp	.+18     	; 0xd0c <vfprintf+0x2d4>
 cfa:	83 2d       	mov	r24, r3
 cfc:	8e 7e       	andi	r24, 0xEE	; 238
 cfe:	a8 2e       	mov	r10, r24
 d00:	05 c0       	rjmp	.+10     	; 0xd0c <vfprintf+0x2d4>
 d02:	b8 2c       	mov	r11, r8
 d04:	a3 2c       	mov	r10, r3
 d06:	03 c0       	rjmp	.+6      	; 0xd0e <vfprintf+0x2d6>
 d08:	b8 2c       	mov	r11, r8
 d0a:	01 c0       	rjmp	.+2      	; 0xd0e <vfprintf+0x2d6>
 d0c:	b9 2c       	mov	r11, r9
 d0e:	a4 fe       	sbrs	r10, 4
 d10:	0f c0       	rjmp	.+30     	; 0xd30 <vfprintf+0x2f8>
 d12:	fe 01       	movw	r30, r28
 d14:	e8 0d       	add	r30, r8
 d16:	f1 1d       	adc	r31, r1
 d18:	80 81       	ld	r24, Z
 d1a:	80 33       	cpi	r24, 0x30	; 48
 d1c:	21 f4       	brne	.+8      	; 0xd26 <vfprintf+0x2ee>
 d1e:	9a 2d       	mov	r25, r10
 d20:	99 7e       	andi	r25, 0xE9	; 233
 d22:	a9 2e       	mov	r10, r25
 d24:	09 c0       	rjmp	.+18     	; 0xd38 <vfprintf+0x300>
 d26:	a2 fe       	sbrs	r10, 2
 d28:	06 c0       	rjmp	.+12     	; 0xd36 <vfprintf+0x2fe>
 d2a:	b3 94       	inc	r11
 d2c:	b3 94       	inc	r11
 d2e:	04 c0       	rjmp	.+8      	; 0xd38 <vfprintf+0x300>
 d30:	8a 2d       	mov	r24, r10
 d32:	86 78       	andi	r24, 0x86	; 134
 d34:	09 f0       	breq	.+2      	; 0xd38 <vfprintf+0x300>
 d36:	b3 94       	inc	r11
 d38:	a3 fc       	sbrc	r10, 3
 d3a:	11 c0       	rjmp	.+34     	; 0xd5e <vfprintf+0x326>
 d3c:	a0 fe       	sbrs	r10, 0
 d3e:	06 c0       	rjmp	.+12     	; 0xd4c <vfprintf+0x314>
 d40:	b2 14       	cp	r11, r2
 d42:	88 f4       	brcc	.+34     	; 0xd66 <vfprintf+0x32e>
 d44:	28 0c       	add	r2, r8
 d46:	92 2c       	mov	r9, r2
 d48:	9b 18       	sub	r9, r11
 d4a:	0e c0       	rjmp	.+28     	; 0xd68 <vfprintf+0x330>
 d4c:	b2 14       	cp	r11, r2
 d4e:	60 f4       	brcc	.+24     	; 0xd68 <vfprintf+0x330>
 d50:	b6 01       	movw	r22, r12
 d52:	80 e2       	ldi	r24, 0x20	; 32
 d54:	90 e0       	ldi	r25, 0x00	; 0
 d56:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
 d5a:	b3 94       	inc	r11
 d5c:	f7 cf       	rjmp	.-18     	; 0xd4c <vfprintf+0x314>
 d5e:	b2 14       	cp	r11, r2
 d60:	18 f4       	brcc	.+6      	; 0xd68 <vfprintf+0x330>
 d62:	2b 18       	sub	r2, r11
 d64:	02 c0       	rjmp	.+4      	; 0xd6a <vfprintf+0x332>
 d66:	98 2c       	mov	r9, r8
 d68:	21 2c       	mov	r2, r1
 d6a:	a4 fe       	sbrs	r10, 4
 d6c:	10 c0       	rjmp	.+32     	; 0xd8e <vfprintf+0x356>
 d6e:	b6 01       	movw	r22, r12
 d70:	80 e3       	ldi	r24, 0x30	; 48
 d72:	90 e0       	ldi	r25, 0x00	; 0
 d74:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
 d78:	a2 fe       	sbrs	r10, 2
 d7a:	17 c0       	rjmp	.+46     	; 0xdaa <vfprintf+0x372>
 d7c:	a1 fc       	sbrc	r10, 1
 d7e:	03 c0       	rjmp	.+6      	; 0xd86 <vfprintf+0x34e>
 d80:	88 e7       	ldi	r24, 0x78	; 120
 d82:	90 e0       	ldi	r25, 0x00	; 0
 d84:	02 c0       	rjmp	.+4      	; 0xd8a <vfprintf+0x352>
 d86:	88 e5       	ldi	r24, 0x58	; 88
 d88:	90 e0       	ldi	r25, 0x00	; 0
 d8a:	b6 01       	movw	r22, r12
 d8c:	0c c0       	rjmp	.+24     	; 0xda6 <vfprintf+0x36e>
 d8e:	8a 2d       	mov	r24, r10
 d90:	86 78       	andi	r24, 0x86	; 134
 d92:	59 f0       	breq	.+22     	; 0xdaa <vfprintf+0x372>
 d94:	a1 fe       	sbrs	r10, 1
 d96:	02 c0       	rjmp	.+4      	; 0xd9c <vfprintf+0x364>
 d98:	8b e2       	ldi	r24, 0x2B	; 43
 d9a:	01 c0       	rjmp	.+2      	; 0xd9e <vfprintf+0x366>
 d9c:	80 e2       	ldi	r24, 0x20	; 32
 d9e:	a7 fc       	sbrc	r10, 7
 da0:	8d e2       	ldi	r24, 0x2D	; 45
 da2:	b6 01       	movw	r22, r12
 da4:	90 e0       	ldi	r25, 0x00	; 0
 da6:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
 daa:	89 14       	cp	r8, r9
 dac:	38 f4       	brcc	.+14     	; 0xdbc <vfprintf+0x384>
 dae:	b6 01       	movw	r22, r12
 db0:	80 e3       	ldi	r24, 0x30	; 48
 db2:	90 e0       	ldi	r25, 0x00	; 0
 db4:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
 db8:	9a 94       	dec	r9
 dba:	f7 cf       	rjmp	.-18     	; 0xdaa <vfprintf+0x372>
 dbc:	8a 94       	dec	r8
 dbe:	f3 01       	movw	r30, r6
 dc0:	e8 0d       	add	r30, r8
 dc2:	f1 1d       	adc	r31, r1
 dc4:	80 81       	ld	r24, Z
 dc6:	b6 01       	movw	r22, r12
 dc8:	90 e0       	ldi	r25, 0x00	; 0
 dca:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
 dce:	81 10       	cpse	r8, r1
 dd0:	f5 cf       	rjmp	.-22     	; 0xdbc <vfprintf+0x384>
 dd2:	22 20       	and	r2, r2
 dd4:	09 f4       	brne	.+2      	; 0xdd8 <vfprintf+0x3a0>
 dd6:	42 ce       	rjmp	.-892    	; 0xa5c <vfprintf+0x24>
 dd8:	b6 01       	movw	r22, r12
 dda:	80 e2       	ldi	r24, 0x20	; 32
 ddc:	90 e0       	ldi	r25, 0x00	; 0
 dde:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
 de2:	2a 94       	dec	r2
 de4:	f6 cf       	rjmp	.-20     	; 0xdd2 <vfprintf+0x39a>
 de6:	f6 01       	movw	r30, r12
 de8:	86 81       	ldd	r24, Z+6	; 0x06
 dea:	97 81       	ldd	r25, Z+7	; 0x07
 dec:	02 c0       	rjmp	.+4      	; 0xdf2 <vfprintf+0x3ba>
 dee:	8f ef       	ldi	r24, 0xFF	; 255
 df0:	9f ef       	ldi	r25, 0xFF	; 255
 df2:	2b 96       	adiw	r28, 0x0b	; 11
 df4:	e2 e1       	ldi	r30, 0x12	; 18
 df6:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__epilogue_restores__>

00000dfa <strnlen_P>:
 dfa:	fc 01       	movw	r30, r24
 dfc:	05 90       	lpm	r0, Z+
 dfe:	61 50       	subi	r22, 0x01	; 1
 e00:	70 40       	sbci	r23, 0x00	; 0
 e02:	01 10       	cpse	r0, r1
 e04:	d8 f7       	brcc	.-10     	; 0xdfc <strnlen_P+0x2>
 e06:	80 95       	com	r24
 e08:	90 95       	com	r25
 e0a:	8e 0f       	add	r24, r30
 e0c:	9f 1f       	adc	r25, r31
 e0e:	08 95       	ret

00000e10 <strnlen>:
 e10:	fc 01       	movw	r30, r24
 e12:	61 50       	subi	r22, 0x01	; 1
 e14:	70 40       	sbci	r23, 0x00	; 0
 e16:	01 90       	ld	r0, Z+
 e18:	01 10       	cpse	r0, r1
 e1a:	d8 f7       	brcc	.-10     	; 0xe12 <strnlen+0x2>
 e1c:	80 95       	com	r24
 e1e:	90 95       	com	r25
 e20:	8e 0f       	add	r24, r30
 e22:	9f 1f       	adc	r25, r31
 e24:	08 95       	ret

00000e26 <fputc>:
 e26:	0f 93       	push	r16
 e28:	1f 93       	push	r17
 e2a:	cf 93       	push	r28
 e2c:	df 93       	push	r29
 e2e:	fb 01       	movw	r30, r22
 e30:	23 81       	ldd	r18, Z+3	; 0x03
 e32:	21 fd       	sbrc	r18, 1
 e34:	03 c0       	rjmp	.+6      	; 0xe3c <fputc+0x16>
 e36:	8f ef       	ldi	r24, 0xFF	; 255
 e38:	9f ef       	ldi	r25, 0xFF	; 255
 e3a:	2c c0       	rjmp	.+88     	; 0xe94 <fputc+0x6e>
 e3c:	22 ff       	sbrs	r18, 2
 e3e:	16 c0       	rjmp	.+44     	; 0xe6c <fputc+0x46>
 e40:	46 81       	ldd	r20, Z+6	; 0x06
 e42:	57 81       	ldd	r21, Z+7	; 0x07
 e44:	24 81       	ldd	r18, Z+4	; 0x04
 e46:	35 81       	ldd	r19, Z+5	; 0x05
 e48:	42 17       	cp	r20, r18
 e4a:	53 07       	cpc	r21, r19
 e4c:	44 f4       	brge	.+16     	; 0xe5e <fputc+0x38>
 e4e:	a0 81       	ld	r26, Z
 e50:	b1 81       	ldd	r27, Z+1	; 0x01
 e52:	9d 01       	movw	r18, r26
 e54:	2f 5f       	subi	r18, 0xFF	; 255
 e56:	3f 4f       	sbci	r19, 0xFF	; 255
 e58:	31 83       	std	Z+1, r19	; 0x01
 e5a:	20 83       	st	Z, r18
 e5c:	8c 93       	st	X, r24
 e5e:	26 81       	ldd	r18, Z+6	; 0x06
 e60:	37 81       	ldd	r19, Z+7	; 0x07
 e62:	2f 5f       	subi	r18, 0xFF	; 255
 e64:	3f 4f       	sbci	r19, 0xFF	; 255
 e66:	37 83       	std	Z+7, r19	; 0x07
 e68:	26 83       	std	Z+6, r18	; 0x06
 e6a:	14 c0       	rjmp	.+40     	; 0xe94 <fputc+0x6e>
 e6c:	8b 01       	movw	r16, r22
 e6e:	ec 01       	movw	r28, r24
 e70:	fb 01       	movw	r30, r22
 e72:	00 84       	ldd	r0, Z+8	; 0x08
 e74:	f1 85       	ldd	r31, Z+9	; 0x09
 e76:	e0 2d       	mov	r30, r0
 e78:	09 95       	icall
 e7a:	89 2b       	or	r24, r25
 e7c:	e1 f6       	brne	.-72     	; 0xe36 <fputc+0x10>
 e7e:	d8 01       	movw	r26, r16
 e80:	16 96       	adiw	r26, 0x06	; 6
 e82:	8d 91       	ld	r24, X+
 e84:	9c 91       	ld	r25, X
 e86:	17 97       	sbiw	r26, 0x07	; 7
 e88:	01 96       	adiw	r24, 0x01	; 1
 e8a:	17 96       	adiw	r26, 0x07	; 7
 e8c:	9c 93       	st	X, r25
 e8e:	8e 93       	st	-X, r24
 e90:	16 97       	sbiw	r26, 0x06	; 6
 e92:	ce 01       	movw	r24, r28
 e94:	df 91       	pop	r29
 e96:	cf 91       	pop	r28
 e98:	1f 91       	pop	r17
 e9a:	0f 91       	pop	r16
 e9c:	08 95       	ret

00000e9e <__ultoa_invert>:
 e9e:	fa 01       	movw	r30, r20
 ea0:	aa 27       	eor	r26, r26
 ea2:	28 30       	cpi	r18, 0x08	; 8
 ea4:	51 f1       	breq	.+84     	; 0xefa <__ultoa_invert+0x5c>
 ea6:	20 31       	cpi	r18, 0x10	; 16
 ea8:	81 f1       	breq	.+96     	; 0xf0a <__ultoa_invert+0x6c>
 eaa:	e8 94       	clt
 eac:	6f 93       	push	r22
 eae:	6e 7f       	andi	r22, 0xFE	; 254
 eb0:	6e 5f       	subi	r22, 0xFE	; 254
 eb2:	7f 4f       	sbci	r23, 0xFF	; 255
 eb4:	8f 4f       	sbci	r24, 0xFF	; 255
 eb6:	9f 4f       	sbci	r25, 0xFF	; 255
 eb8:	af 4f       	sbci	r26, 0xFF	; 255
 eba:	b1 e0       	ldi	r27, 0x01	; 1
 ebc:	3e d0       	rcall	.+124    	; 0xf3a <__ultoa_invert+0x9c>
 ebe:	b4 e0       	ldi	r27, 0x04	; 4
 ec0:	3c d0       	rcall	.+120    	; 0xf3a <__ultoa_invert+0x9c>
 ec2:	67 0f       	add	r22, r23
 ec4:	78 1f       	adc	r23, r24
 ec6:	89 1f       	adc	r24, r25
 ec8:	9a 1f       	adc	r25, r26
 eca:	a1 1d       	adc	r26, r1
 ecc:	68 0f       	add	r22, r24
 ece:	79 1f       	adc	r23, r25
 ed0:	8a 1f       	adc	r24, r26
 ed2:	91 1d       	adc	r25, r1
 ed4:	a1 1d       	adc	r26, r1
 ed6:	6a 0f       	add	r22, r26
 ed8:	71 1d       	adc	r23, r1
 eda:	81 1d       	adc	r24, r1
 edc:	91 1d       	adc	r25, r1
 ede:	a1 1d       	adc	r26, r1
 ee0:	20 d0       	rcall	.+64     	; 0xf22 <__ultoa_invert+0x84>
 ee2:	09 f4       	brne	.+2      	; 0xee6 <__ultoa_invert+0x48>
 ee4:	68 94       	set
 ee6:	3f 91       	pop	r19
 ee8:	2a e0       	ldi	r18, 0x0A	; 10
 eea:	26 9f       	mul	r18, r22
 eec:	11 24       	eor	r1, r1
 eee:	30 19       	sub	r19, r0
 ef0:	30 5d       	subi	r19, 0xD0	; 208
 ef2:	31 93       	st	Z+, r19
 ef4:	de f6       	brtc	.-74     	; 0xeac <__ultoa_invert+0xe>
 ef6:	cf 01       	movw	r24, r30
 ef8:	08 95       	ret
 efa:	46 2f       	mov	r20, r22
 efc:	47 70       	andi	r20, 0x07	; 7
 efe:	40 5d       	subi	r20, 0xD0	; 208
 f00:	41 93       	st	Z+, r20
 f02:	b3 e0       	ldi	r27, 0x03	; 3
 f04:	0f d0       	rcall	.+30     	; 0xf24 <__ultoa_invert+0x86>
 f06:	c9 f7       	brne	.-14     	; 0xefa <__ultoa_invert+0x5c>
 f08:	f6 cf       	rjmp	.-20     	; 0xef6 <__ultoa_invert+0x58>
 f0a:	46 2f       	mov	r20, r22
 f0c:	4f 70       	andi	r20, 0x0F	; 15
 f0e:	40 5d       	subi	r20, 0xD0	; 208
 f10:	4a 33       	cpi	r20, 0x3A	; 58
 f12:	18 f0       	brcs	.+6      	; 0xf1a <__ultoa_invert+0x7c>
 f14:	49 5d       	subi	r20, 0xD9	; 217
 f16:	31 fd       	sbrc	r19, 1
 f18:	40 52       	subi	r20, 0x20	; 32
 f1a:	41 93       	st	Z+, r20
 f1c:	02 d0       	rcall	.+4      	; 0xf22 <__ultoa_invert+0x84>
 f1e:	a9 f7       	brne	.-22     	; 0xf0a <__ultoa_invert+0x6c>
 f20:	ea cf       	rjmp	.-44     	; 0xef6 <__ultoa_invert+0x58>
 f22:	b4 e0       	ldi	r27, 0x04	; 4
 f24:	a6 95       	lsr	r26
 f26:	97 95       	ror	r25
 f28:	87 95       	ror	r24
 f2a:	77 95       	ror	r23
 f2c:	67 95       	ror	r22
 f2e:	ba 95       	dec	r27
 f30:	c9 f7       	brne	.-14     	; 0xf24 <__ultoa_invert+0x86>
 f32:	00 97       	sbiw	r24, 0x00	; 0
 f34:	61 05       	cpc	r22, r1
 f36:	71 05       	cpc	r23, r1
 f38:	08 95       	ret
 f3a:	9b 01       	movw	r18, r22
 f3c:	ac 01       	movw	r20, r24
 f3e:	0a 2e       	mov	r0, r26
 f40:	06 94       	lsr	r0
 f42:	57 95       	ror	r21
 f44:	47 95       	ror	r20
 f46:	37 95       	ror	r19
 f48:	27 95       	ror	r18
 f4a:	ba 95       	dec	r27
 f4c:	c9 f7       	brne	.-14     	; 0xf40 <__ultoa_invert+0xa2>
 f4e:	62 0f       	add	r22, r18
 f50:	73 1f       	adc	r23, r19
 f52:	84 1f       	adc	r24, r20
 f54:	95 1f       	adc	r25, r21
 f56:	a0 1d       	adc	r26, r0
 f58:	08 95       	ret

00000f5a <__prologue_saves__>:
 f5a:	2f 92       	push	r2
 f5c:	3f 92       	push	r3
 f5e:	4f 92       	push	r4
 f60:	5f 92       	push	r5
 f62:	6f 92       	push	r6
 f64:	7f 92       	push	r7
 f66:	8f 92       	push	r8
 f68:	9f 92       	push	r9
 f6a:	af 92       	push	r10
 f6c:	bf 92       	push	r11
 f6e:	cf 92       	push	r12
 f70:	df 92       	push	r13
 f72:	ef 92       	push	r14
 f74:	ff 92       	push	r15
 f76:	0f 93       	push	r16
 f78:	1f 93       	push	r17
 f7a:	cf 93       	push	r28
 f7c:	df 93       	push	r29
 f7e:	cd b7       	in	r28, 0x3d	; 61
 f80:	de b7       	in	r29, 0x3e	; 62
 f82:	ca 1b       	sub	r28, r26
 f84:	db 0b       	sbc	r29, r27
 f86:	0f b6       	in	r0, 0x3f	; 63
 f88:	f8 94       	cli
 f8a:	de bf       	out	0x3e, r29	; 62
 f8c:	0f be       	out	0x3f, r0	; 63
 f8e:	cd bf       	out	0x3d, r28	; 61
 f90:	09 94       	ijmp

00000f92 <__epilogue_restores__>:
 f92:	2a 88       	ldd	r2, Y+18	; 0x12
 f94:	39 88       	ldd	r3, Y+17	; 0x11
 f96:	48 88       	ldd	r4, Y+16	; 0x10
 f98:	5f 84       	ldd	r5, Y+15	; 0x0f
 f9a:	6e 84       	ldd	r6, Y+14	; 0x0e
 f9c:	7d 84       	ldd	r7, Y+13	; 0x0d
 f9e:	8c 84       	ldd	r8, Y+12	; 0x0c
 fa0:	9b 84       	ldd	r9, Y+11	; 0x0b
 fa2:	aa 84       	ldd	r10, Y+10	; 0x0a
 fa4:	b9 84       	ldd	r11, Y+9	; 0x09
 fa6:	c8 84       	ldd	r12, Y+8	; 0x08
 fa8:	df 80       	ldd	r13, Y+7	; 0x07
 faa:	ee 80       	ldd	r14, Y+6	; 0x06
 fac:	fd 80       	ldd	r15, Y+5	; 0x05
 fae:	0c 81       	ldd	r16, Y+4	; 0x04
 fb0:	1b 81       	ldd	r17, Y+3	; 0x03
 fb2:	aa 81       	ldd	r26, Y+2	; 0x02
 fb4:	b9 81       	ldd	r27, Y+1	; 0x01
 fb6:	ce 0f       	add	r28, r30
 fb8:	d1 1d       	adc	r29, r1
 fba:	0f b6       	in	r0, 0x3f	; 63
 fbc:	f8 94       	cli
 fbe:	de bf       	out	0x3e, r29	; 62
 fc0:	0f be       	out	0x3f, r0	; 63
 fc2:	cd bf       	out	0x3d, r28	; 61
 fc4:	ed 01       	movw	r28, r26
 fc6:	08 95       	ret

00000fc8 <_exit>:
 fc8:	f8 94       	cli

00000fca <__stop_program>:
 fca:	ff cf       	rjmp	.-2      	; 0xfca <__stop_program>
